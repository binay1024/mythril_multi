Function : withdrawRewardFor() with hash 0x39a110e6 , address 335 found
Function : closingTime() with hash 0x4b6753bc , address 382 found
Function : paidOut(address) with hash 0x81f03fcb , address 425 found
Function : paid(address) with hash 0xa340cf79 , address 526 found
Function : minTokensToCreate() with hash 0x0c3b7b96 , address 162 found
Function : rewardAccount() with hash 0x0e708203 , address 205 found
Function : totalSupply() with hash 0x18160ddd , address 292 found
Function : payOut(address,uint256) with hash 0x0221038a , address 75 found
Function : owner() or ideal_warn_timed(uint256,uint128) with hash 0x8da5cb5b , address 177 found
Function : accumulatedInput() with hash 0xd2cc718f , address 264 found
Function : attack(uint256,string,address) with hash 0x3a27057b , address 1332 found
Function : counter() with hash 0x61bc221a , address 1561 found
Function : func_sig() with hash 0x74c52242 , address 1604 found
Function : last_caller_addr() with hash 0xad1ab8a1 , address 1748 found
Function : victim_addr() with hash 0xe1b73aa1 , address 1835 found
setup AttackBridge
Function : attack(uint256,string,address) with hash 0x3a27057b , address 1332 found
Function : counter() with hash 0x61bc221a , address 1561 found
Function : func_sig() with hash 0x74c52242 , address 1604 found
Function : last_caller_addr() with hash 0xad1ab8a1 , address 1748 found
Function : victim_addr() with hash 0xe1b73aa1 , address 1835 found
unreached path
Now in function: constructor in contract: AttackBridge
now in creation end, the activate_function is: constructor
Function : attack(uint256,string,address) with hash 0x3a27057b , address 1332 found
Function : counter() with hash 0x61bc221a , address 1561 found
Function : func_sig() with hash 0x74c52242 , address 1604 found
Function : last_caller_addr() with hash 0xad1ab8a1 , address 1748 found
Function : victim_addr() with hash 0xe1b73aa1 , address 1835 found
try to print global_state_call_chain: []
END with EOA TX CASE: ContractCreationTransaction 1 from 1271270613000041655817448348132275889066893754095 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is []
Multi analyze mode
Function : withdrawRewardFor() with hash 0x39a110e6 , address 335 found
Function : closingTime() with hash 0x4b6753bc , address 382 found
Function : paidOut(address) with hash 0x81f03fcb , address 425 found
Function : paid(address) with hash 0xa340cf79 , address 526 found
Function : minTokensToCreate() with hash 0x0c3b7b96 , address 162 found
Function : rewardAccount() with hash 0x0e708203 , address 205 found
Function : totalSupply() with hash 0x18160ddd , address 292 found
Function : payOut(address,uint256) with hash 0x0221038a , address 75 found
Function : owner() or ideal_warn_timed(uint256,uint128) with hash 0x8da5cb5b , address 177 found
Function : accumulatedInput() with hash 0xd2cc718f , address 264 found
Now in function: constructor in contract: MAIN
2 worklist added! now the worklist num is 2
now we have 2 global state (path)!
now in creation end, the activate_function is: constructor
try to print global_state_call_chain: []
END with EOA TX CASE: ContractCreationTransaction 2 from 1004753105490295263244812946565948198177742958590 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 1 global state (path)!
unreached path
Now in function: constructor in contract: MAIN
Function : payOut(address,uint256) with hash 0x0221038a , address 75 found
Function : owner() or ideal_warn_timed(uint256,uint128) with hash 0x8da5cb5b , address 177 found
Function : accumulatedInput() with hash 0xd2cc718f , address 264 found
Setup new transaction %s ContractCreationTransaction 4 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
unreached path
Now in function: constructor in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
unreached path
Now in function: constructor in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
now in creation end, the activate_function is: constructor
Function : payOut(address,uint256) with hash 0x0221038a , address 75 found
Function : owner() or ideal_warn_timed(uint256,uint128) with hash 0x8da5cb5b , address 177 found
Function : accumulatedInput() with hash 0xd2cc718f , address 264 found
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: ContractCreationTransaction 4 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015 **************************
print origin potentiaon issue 0
Add new potential issue
print after potentiaon issue 1
End Transaction with MessageTX Normally: ContractCreationTransaction 4 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
call_chain is []
Warning! last_return_data.mem_out_off and size may be none
unreached path
Now in function: constructor in contract: MAIN
unreached path
Now in function: constructor in contract: MAIN
now in creation end, the activate_function is: constructor
Function : withdrawRewardFor() with hash 0x39a110e6 , address 335 found
Function : closingTime() with hash 0x4b6753bc , address 382 found
Function : paidOut(address) with hash 0x81f03fcb , address 425 found
Function : paid(address) with hash 0xa340cf79 , address 526 found
Function : minTokensToCreate() with hash 0x0c3b7b96 , address 162 found
Function : rewardAccount() with hash 0x0e708203 , address 205 found
Function : totalSupply() with hash 0x18160ddd , address 292 found
try to print global_state_call_chain: [['START'], ['MAIN', 'constructor'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'constructor'], ['END']]
END with EOA TX CASE: ContractCreationTransaction 2 from 1004753105490295263244812946565948198177742958590 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f ***********
output EOA case global_state: [['START'], ['MAIN', 'constructor'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'constructor'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['MAIN', 'constructor'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'constructor'], ['END']]
main:  
Excute 0 TX Loop!!!
Now we have 1 open states!!!
Starting message call transaction, iteration: 0, 1 initial states
Starting message call transaction to: 1271270613000041655817448348132275889066893754095
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 2
now we have 2 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 3
now we have 3 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 2 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 3
now we have 3 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 4
now we have 4 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 5
now we have 5 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 6
now we have 6 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 5 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 6
now we have 6 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 5 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 6
now we have 6 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 5 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 6
now we have 6 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 7
now we have 7 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 6 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 7
now we have 7 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 6 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 5 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 6
now we have 6 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 5 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 4 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 5
now we have 5 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 4 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 3 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 2 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 3
now we have 3 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 2 global state (path)!
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 1 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 2
now we have 2 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 3
now we have 3 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 4
now we have 4 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now we have 3 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 4
now we have 4 global state (path)!
Warning !!!world_state unsatisfied
now we have 3 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Warning !!!world_state unsatisfied
now we have 2 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
=============Call Instruction!! print stack states=============
Symbolic call encountered
------------------ get callable target call -------------------------------
catch main account51421440056055728346017419001665401074216449311
[callable tx created] =============
MAIN
Setup new transaction %s MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 3
now we have 3 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 4
now we have 4 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 5
now we have 5 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 6
now we have 6 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 7
now we have 7 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 8
now we have 8 global state (path)!
Now in function: withdrawRewardFor() in contract: MAIN
2 worklist added! now the worklist num is 9
now we have 9 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 10
now we have 10 global state (path)!
Now in function: minTokensToCreate() in contract: MAIN
2 worklist added! now the worklist num is 11
now we have 11 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: withdrawRewardFor()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 12
now we have 12 global state (path)!
now in msTX end, the activate_function is: minTokensToCreate()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: closingTime() in contract: MAIN
2 worklist added! now the worklist num is 13
now we have 13 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 14
now we have 14 global state (path)!
Now in function: rewardAccount() in contract: MAIN
2 worklist added! now the worklist num is 15
now we have 15 global state (path)!
now in msTX end, the activate_function is: closingTime()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
now in msTX end, the activate_function is: rewardAccount()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
Now in function: paidOut(address) in contract: MAIN
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
Now in function: totalSupply() in contract: MAIN
2 worklist added! now the worklist num is 19
now we have 19 global state (path)!
now in msTX end, the activate_function is: paidOut(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

unreached path
Now in function: fallback in contract: MAIN
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: totalSupply()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: paid(address) in contract: MAIN
2 worklist added! now the worklist num is 20
now we have 20 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 21
now we have 21 global state (path)!
now in msTX end, the activate_function is: paid(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 22
now we have 22 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
Now in function: paidOut(address) in contract: MAIN
2 worklist added! now the worklist num is 23
now we have 23 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 24
now we have 24 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: paidOut(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 25
now we have 25 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 26
now we have 26 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: paid(address) in contract: MAIN
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 28
now we have 28 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 27 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 26 global state (path)!
now in msTX end, the activate_function is: minTokensToCreate()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
print after potentiaon issue 4
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
now in msTX end, the activate_function is: paid(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
now we have 25 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 26
now we have 26 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
now in msTX end, the activate_function is: closingTime()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
print after potentiaon issue 4
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
now in msTX end, the activate_function is: withdrawRewardFor()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
now we have 26 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
now we have 26 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 28
now we have 28 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 29
now we have 29 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 28 global state (path)!
now in msTX end, the activate_function is: totalSupply()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
print after potentiaon issue 4
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
now we have 27 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 26 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 26 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
now we have 26 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 25 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 26
now we have 26 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
now we have 25 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
now we have 24 global state (path)!
now in msTX end, the activate_function is: rewardAccount()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
print after potentiaon issue 4
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 25
now we have 25 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 24 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 25
now we have 25 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 24 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
now we have 23 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 24
now we have 24 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 23 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 24
now we have 24 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 25
now we have 25 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 24 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 23 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 24
now we have 24 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 23 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 22 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 23
now we have 23 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 22 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 21 global state (path)!
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 20 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 19 global state (path)!
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 18 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 17 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 16 global state (path)!
=============Call Instruction!! print stack states=============
Symbolic call encountered
------------------ get callable target call -------------------------------
catch main account51421440056055728346017419001665401074216449311
[callable tx created] =============
MAIN
Setup new transaction %s MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 15 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 15 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
now we have 14 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 15
now we have 15 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
now in msTX end, the activate_function is: paidOut(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
print after potentiaon issue 4
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
now we have 15 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
=============Call Instruction!! print stack states=============
get the account from address
------------------ call to a fixed or created target  -------------------------------
Setup new transaction %s MessageCallTransaction 8 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 15 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
now in msTX end, the activate_function is: paid(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
print after potentiaon issue 4
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
now we have 17 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 16 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 15 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
now we have 16 global state (path)!
unreached path
Now in function: fallback in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 15 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
now we have 15 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
now we have 17 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 16 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
now we have 16 global state (path)!
Now in function: withdrawRewardFor() in contract: MAIN
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 17 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 16 global state (path)!
Now in function: minTokensToCreate() in contract: MAIN
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: withdrawRewardFor()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
now in msTX end, the activate_function is: minTokensToCreate()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 17 global state (path)!
Now in function: closingTime() in contract: MAIN
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 19
now we have 19 global state (path)!
Now in function: rewardAccount() in contract: MAIN
2 worklist added! now the worklist num is 20
now we have 20 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
now we have 19 global state (path)!
now in msTX end, the activate_function is: closingTime()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 8 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015 **************************
print origin potentiaon issue 1
Add new potential issue
print after potentiaon issue 2
End Transaction with MessageTX Normally: MessageCallTransaction 8 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
call_chain is []
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 20
now we have 20 global state (path)!
now in msTX end, the activate_function is: rewardAccount()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 21
now we have 21 global state (path)!
=============Call Instruction!! print stack states=============
get the account from address
------------------ call to a fixed or created target  -------------------------------
Setup new transaction %s MessageCallTransaction 9 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
Now in function: paidOut(address) in contract: MAIN
2 worklist added! now the worklist num is 22
now we have 22 global state (path)!
Now in function: totalSupply() in contract: MAIN
2 worklist added! now the worklist num is 23
now we have 23 global state (path)!
now in msTX end, the activate_function is: paidOut(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

unreached path
Now in function: fallback in contract: MAIN
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
=============Call Instruction!! print stack states=============
get the account from address
------------------ call to a fixed or created target  -------------------------------
Setup new transaction %s MessageCallTransaction 10 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: totalSupply()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
Now in function: paid(address) in contract: MAIN
2 worklist added! now the worklist num is 24
now we have 24 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 25
now we have 25 global state (path)!
unreached path
Now in function: fallback in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: paid(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
unreached path
Now in function: fallback in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 26
now we have 26 global state (path)!
unreached path
Now in function: fallback in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
unreached path
Now in function: fallback in contract: MAIN
Now in function: paidOut(address) in contract: MAIN
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 28
now we have 28 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 29
now we have 29 global state (path)!
now in msTX end, the activate_function is: paidOut(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 30
now we have 30 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 31
now we have 31 global state (path)!
Now in function: paid(address) in contract: MAIN
2 worklist added! now the worklist num is 32
now we have 32 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 33
now we have 33 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
now we have 32 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 31 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 30 global state (path)!
now in msTX end, the activate_function is: minTokensToCreate()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 31
now we have 31 global state (path)!
now in msTX end, the activate_function is: paid(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
now we have 30 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 31
now we have 31 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 32
now we have 32 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
now we have 31 global state (path)!
now in msTX end, the activate_function is: closingTime()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
now in msTX end, the activate_function is: withdrawRewardFor()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 9 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015 **************************
print origin potentiaon issue 1
Add new potential issue
print after potentiaon issue 2
End Transaction with MessageTX Normally: MessageCallTransaction 9 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
call_chain is []
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
now we have 30 global state (path)!
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 31
now we have 31 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
now we have 30 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 31
now we have 31 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 32
now we have 32 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 10 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015 **************************
print origin potentiaon issue 1
Add new potential issue
print after potentiaon issue 2
End Transaction with MessageTX Normally: MessageCallTransaction 10 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
call_chain is []
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 33
now we have 33 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 32 global state (path)!
now in msTX end, the activate_function is: totalSupply()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
now we have 31 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
now we have 30 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 29 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 30
now we have 30 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 29 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 30
now we have 30 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()revert'], ['END']]
now we have 29 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 28 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
now we have 27 global state (path)!
unreached path
Now in function: fallback in contract: AttackBridge
Now in function: fallback in contract: MAIN
2 worklist added! now the worklist num is 28
now we have 28 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()revert'], ['END']]
now we have 27 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()revert'], ['END']]
now we have 26 global state (path)!
now in msTX end, the activate_function is: rewardAccount()
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
unreached path
Now in function: fallback in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 26 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 26 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()revert'], ['END']]
now we have 25 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 26
now we have 26 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 25 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 26
now we have 26 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 27
now we have 27 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 26 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 25 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 26
now we have 26 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 25 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 24 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 25
now we have 25 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 24 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 23 global state (path)!
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)revert'], ['END']]
now we have 22 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
End Transaction with Revert: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []

now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 21 global state (path)!
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)revert'], ['END']]
now we have 20 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 19 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 18 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'withdrawRewardFor()revert'], ['END']]
now we have 17 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 17 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
now we have 16 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
now in msTX end, the activate_function is: paidOut(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
now we have 16 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
=============Call Instruction!! print stack states=============
get the account from address
------------------ call to a fixed or created target  -------------------------------
Setup new transaction %s MessageCallTransaction 11 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 10
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 16 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 18
now we have 18 global state (path)!
now in msTX end, the activate_function is: paid(address)
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is []
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 19
now we have 19 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
now we have 18 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 17 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 16 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 17
now we have 17 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'minTokensToCreate()'], ['END']]
now we have 16 global state (path)!
unreached path
Now in function: fallback in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 15 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 16
now we have 16 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'closingTime()'], ['END']]
now we have 15 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
now we have 14 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 13 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'totalSupply()'], ['END']]
now we have 12 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 11 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 10 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallbackrevert'], ['END']]
now we have 9 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'rewardAccount()'], ['END']]
now we have 8 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 11 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015 **************************
print origin potentiaon issue 1
Add new potential issue
print after potentiaon issue 2
End Transaction with MessageTX Normally: MessageCallTransaction 11 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
call_chain is []
=============Call Instruction!! print stack states=============
get the account from address
------------------ call to a fixed or created target  -------------------------------
Setup new transaction %s MessageCallTransaction 12 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 10
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
unreached path
Now in function: fallback in contract: MAIN
=============Call Instruction!! print stack states=============
get the account from address
------------------ call to a fixed or created target  -------------------------------
Setup new transaction %s MessageCallTransaction 13 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
END WITH Internal MessageCALLTX: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 4
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 10
End Transaction with MessageTX Normally: MessageCallTransaction 6 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
unreached path
Now in function: fallback in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Warning! Unsupported symbolic memory offset in RETURNDATACOPY 
unreached path
Now in function: fallback in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: fallback in contract: 0x72c68108a82e82617b93d1be0d7975d762035015
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
now we have 7 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 8
now we have 8 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
now we have 7 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 8
now we have 8 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
now we have 7 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 12 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015 **************************
print origin potentiaon issue 1
Add new potential issue
print after potentiaon issue 2
End Transaction with MessageTX Normally: MessageCallTransaction 12 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
call_chain is []
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END WITH Internal MessageCALLTX: MessageCallTransaction 13 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015 **************************
print origin potentiaon issue 1
Add new potential issue
print after potentiaon issue 2
End Transaction with MessageTX Normally: MessageCallTransaction 13 from 51421440056055728346017419001665401074216449311 to 0x72c68108a82e82617b93d1be0d7975d762035015
call_chain is []
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paidOut(address)'], ['END']]
now we have 6 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'paid(address)'], ['END']]
now we have 5 global state (path)!
unreached path
Now in function: fallback in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
now we have 4 global state (path)!
unreached path
Now in function: fallback in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
now we have 3 global state (path)!
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 12
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: fallback in contract: MAIN
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 12
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
unreached path
Now in function: fallback in contract: MAIN
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
END WITH Internal MessageCALLTX: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 6
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 12
End Transaction with MessageTX Normally: MessageCallTransaction 7 from 1271270613000041655817448348132275889066893754095 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is [['START'], ['MAIN', 'fallback'], ['0x72c68108a82e82617b93d1be0d7975d762035015', 'fallback'], ['END']]
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
now we have 2 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
now we have 1 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
END with EOA TX CASE: MessageCallTransaction 5 from sender_5 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is [['START'], ['AttackBridge', 'attack(uint256,string,address)'], ['MAIN', 'fallback'], ['END']]


Excute 1 TX Loop!!!







































Now we have 60 open states!!!
Starting message call transaction, iteration: 1, 60 initial states
Starting message call transaction to: 1271270613000041655817448348132275889066893754095
now we have 60 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 61
now we have 61 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 62
now we have 62 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 63
now we have 63 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 64
now we have 64 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 65
now we have 65 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 66
now we have 66 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 67
now we have 67 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 68
now we have 68 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 69
now we have 69 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 70
now we have 70 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 71
now we have 71 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 72
now we have 72 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 73
now we have 73 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 74
now we have 74 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 75
now we have 75 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 76
now we have 76 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 77
now we have 77 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 78
now we have 78 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 79
now we have 79 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 80
now we have 80 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 81
now we have 81 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 82
now we have 82 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 83
now we have 83 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 84
now we have 84 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 85
now we have 85 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 86
now we have 86 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 87
now we have 87 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 88
now we have 88 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 89
now we have 89 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 90
now we have 90 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 91
now we have 91 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 92
now we have 92 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 93
now we have 93 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 94
now we have 94 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 95
now we have 95 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 96
now we have 96 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 97
now we have 97 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 98
now we have 98 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 99
now we have 99 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 100
now we have 100 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 101
now we have 101 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 102
now we have 102 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 103
now we have 103 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 104
now we have 104 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 105
now we have 105 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 106
now we have 106 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 107
now we have 107 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 108
now we have 108 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 109
now we have 109 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 110
now we have 110 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 111
now we have 111 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 112
now we have 112 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 113
now we have 113 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 114
now we have 114 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 115
now we have 115 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 116
now we have 116 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 117
now we have 117 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 118
now we have 118 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 119
now we have 119 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 120
now we have 120 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 121
now we have 121 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 122
now we have 122 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 123
now we have 123 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 124
now we have 124 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 125
now we have 125 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 126
now we have 126 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 127
now we have 127 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 128
now we have 128 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 129
now we have 129 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 130
now we have 130 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 131
now we have 131 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 132
now we have 132 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 133
now we have 133 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 134
now we have 134 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 135
now we have 135 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 136
now we have 136 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 137
now we have 137 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 138
now we have 138 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 139
now we have 139 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 140
now we have 140 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 141
now we have 141 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 142
now we have 142 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 143
now we have 143 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 144
now we have 144 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 145
now we have 145 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 146
now we have 146 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 147
now we have 147 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 148
now we have 148 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 149
now we have 149 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 150
now we have 150 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 151
now we have 151 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 152
now we have 152 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 153
now we have 153 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 154
now we have 154 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 155
now we have 155 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 156
now we have 156 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 157
now we have 157 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 158
now we have 158 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 159
now we have 159 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 160
now we have 160 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 161
now we have 161 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 162
now we have 162 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 163
now we have 163 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 164
now we have 164 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 165
now we have 165 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 166
now we have 166 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 167
now we have 167 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 168
now we have 168 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 169
now we have 169 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 170
now we have 170 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 171
now we have 171 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 172
now we have 172 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 173
now we have 173 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 174
now we have 174 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 175
now we have 175 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 176
now we have 176 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 177
now we have 177 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 178
now we have 178 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 179
now we have 179 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 180
now we have 180 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 179 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 178 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 177 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 176 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 175 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 174 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 173 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 172 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 171 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 170 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 169 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 168 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 167 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 166 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 165 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 164 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 163 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 162 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 161 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 160 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 159 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 158 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 157 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 156 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 155 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 154 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 153 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 152 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 151 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 150 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 149 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 148 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 147 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 146 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 145 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 144 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 143 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 142 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 141 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 140 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 139 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 138 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 137 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 136 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 135 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 134 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 133 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 132 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 131 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 130 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 129 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 128 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 127 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 126 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 125 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 124 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 123 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 122 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 121 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 120 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 121
now we have 121 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 122
now we have 122 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 123
now we have 123 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 124
now we have 124 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 125
now we have 125 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 126
now we have 126 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 127
now we have 127 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 128
now we have 128 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 129
now we have 129 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 130
now we have 130 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 131
now we have 131 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 132
now we have 132 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 133
now we have 133 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 134
now we have 134 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 135
now we have 135 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 136
now we have 136 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 137
now we have 137 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 138
now we have 138 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 139
now we have 139 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 140
now we have 140 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 141
now we have 141 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 142
now we have 142 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 143
now we have 143 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 144
now we have 144 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 145
now we have 145 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 146
now we have 146 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 147
now we have 147 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 148
now we have 148 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 149
now we have 149 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 150
now we have 150 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 151
now we have 151 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 152
now we have 152 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 153
now we have 153 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 154
now we have 154 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 155
now we have 155 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 156
now we have 156 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 157
now we have 157 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 158
now we have 158 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 159
now we have 159 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 160
now we have 160 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 161
now we have 161 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 162
now we have 162 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 163
now we have 163 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 164
now we have 164 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 165
now we have 165 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 166
now we have 166 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 167
now we have 167 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 168
now we have 168 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 169
now we have 169 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 170
now we have 170 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 171
now we have 171 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 172
now we have 172 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 173
now we have 173 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 174
now we have 174 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 175
now we have 175 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 176
now we have 176 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 177
now we have 177 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 178
now we have 178 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 179
now we have 179 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 180
now we have 180 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 181
now we have 181 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 182
now we have 182 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 183
now we have 183 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 184
now we have 184 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 185
now we have 185 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 186
now we have 186 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 187
now we have 187 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 188
now we have 188 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 189
now we have 189 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 190
now we have 190 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 191
now we have 191 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 192
now we have 192 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 193
now we have 193 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 194
now we have 194 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 195
now we have 195 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 196
now we have 196 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 197
now we have 197 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 198
now we have 198 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 199
now we have 199 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 200
now we have 200 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 201
now we have 201 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 202
now we have 202 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 203
now we have 203 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 204
now we have 204 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 205
now we have 205 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 206
now we have 206 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 207
now we have 207 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 208
now we have 208 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 209
now we have 209 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 210
now we have 210 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 211
now we have 211 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 212
now we have 212 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 213
now we have 213 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 214
now we have 214 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 215
now we have 215 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 216
now we have 216 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 217
now we have 217 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 218
now we have 218 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 219
now we have 219 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 220
now we have 220 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 221
now we have 221 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 222
now we have 222 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 223
now we have 223 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 224
now we have 224 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 225
now we have 225 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 226
now we have 226 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 227
now we have 227 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 228
now we have 228 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 229
now we have 229 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 230
now we have 230 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 231
now we have 231 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 232
now we have 232 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 233
now we have 233 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 234
now we have 234 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 235
now we have 235 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 236
now we have 236 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 237
now we have 237 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 238
now we have 238 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 239
now we have 239 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 240
now we have 240 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 241
now we have 241 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 242
now we have 242 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 243
now we have 243 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 244
now we have 244 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 245
now we have 245 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 246
now we have 246 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 247
now we have 247 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 248
now we have 248 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 249
now we have 249 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 250
now we have 250 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 251
now we have 251 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 252
now we have 252 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 253
now we have 253 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 254
now we have 254 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 255
now we have 255 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 256
now we have 256 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 257
now we have 257 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 258
now we have 258 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 259
now we have 259 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 260
now we have 260 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 261
now we have 261 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 262
now we have 262 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 263
now we have 263 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 264
now we have 264 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 265
now we have 265 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 266
now we have 266 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 267
now we have 267 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 268
now we have 268 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 269
now we have 269 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 270
now we have 270 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 271
now we have 271 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 272
now we have 272 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 273
now we have 273 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 274
now we have 274 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 275
now we have 275 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 276
now we have 276 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 277
now we have 277 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 278
now we have 278 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 279
now we have 279 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 280
now we have 280 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 281
now we have 281 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 282
now we have 282 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 283
now we have 283 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 284
now we have 284 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 285
now we have 285 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 286
now we have 286 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 287
now we have 287 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 288
now we have 288 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 289
now we have 289 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 290
now we have 290 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 291
now we have 291 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 292
now we have 292 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 293
now we have 293 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 294
now we have 294 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 295
now we have 295 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 296
now we have 296 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 297
now we have 297 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 298
now we have 298 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 299
now we have 299 global state (path)!
Now in function: counter() in contract: AttackBridge
2 worklist added! now the worklist num is 300
now we have 300 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 302
now we have 302 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 303
now we have 303 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 304
now we have 304 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 305
now we have 305 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 306
now we have 306 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 307
now we have 307 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 308
now we have 308 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 309
now we have 309 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 310
now we have 310 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 311
now we have 311 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 312
now we have 312 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 313
now we have 313 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 314
now we have 314 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 315
now we have 315 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 316
now we have 316 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 317
now we have 317 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 318
now we have 318 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 319
now we have 319 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 320
now we have 320 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 321
now we have 321 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 322
now we have 322 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 323
now we have 323 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 324
now we have 324 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 325
now we have 325 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 326
now we have 326 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 327
now we have 327 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 328
now we have 328 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 329
now we have 329 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 330
now we have 330 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 331
now we have 331 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 332
now we have 332 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 333
now we have 333 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 334
now we have 334 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 335
now we have 335 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 336
now we have 336 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 337
now we have 337 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 338
now we have 338 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 339
now we have 339 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 340
now we have 340 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 341
now we have 341 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 342
now we have 342 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 343
now we have 343 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 344
now we have 344 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 345
now we have 345 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 346
now we have 346 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 347
now we have 347 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 348
now we have 348 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 349
now we have 349 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 350
now we have 350 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 351
now we have 351 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 352
now we have 352 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 353
now we have 353 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 354
now we have 354 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 355
now we have 355 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 356
now we have 356 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 357
now we have 357 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 358
now we have 358 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 359
now we have 359 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 360
now we have 360 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 359 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 358 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 357 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 356 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 355 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 354 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 353 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 352 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 351 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 350 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 349 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 348 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 347 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 346 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 345 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 344 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 343 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 342 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 341 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 340 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 339 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 338 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 337 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 336 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 335 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 334 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 333 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 332 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 331 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 330 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 329 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 328 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 327 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 326 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 325 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 324 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 323 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 322 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 321 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 320 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 319 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 318 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 317 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 316 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 315 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 314 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 313 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 312 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 311 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 310 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 309 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 308 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 307 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 306 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 305 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 304 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 303 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 302 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 301 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 302
now we have 302 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 303
now we have 303 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 304
now we have 304 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 305
now we have 305 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 306
now we have 306 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 307
now we have 307 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 308
now we have 308 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 309
now we have 309 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 310
now we have 310 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 311
now we have 311 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 312
now we have 312 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 313
now we have 313 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 314
now we have 314 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 315
now we have 315 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 316
now we have 316 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 317
now we have 317 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 318
now we have 318 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 319
now we have 319 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 320
now we have 320 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 321
now we have 321 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 322
now we have 322 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 323
now we have 323 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 324
now we have 324 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 325
now we have 325 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 326
now we have 326 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 327
now we have 327 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 328
now we have 328 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 329
now we have 329 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 330
now we have 330 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 331
now we have 331 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 332
now we have 332 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 333
now we have 333 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 334
now we have 334 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 335
now we have 335 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 336
now we have 336 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 337
now we have 337 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 338
now we have 338 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 339
now we have 339 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 340
now we have 340 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 341
now we have 341 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 342
now we have 342 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 343
now we have 343 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 344
now we have 344 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 345
now we have 345 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 346
now we have 346 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 347
now we have 347 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 348
now we have 348 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 349
now we have 349 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 350
now we have 350 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 351
now we have 351 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 352
now we have 352 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 353
now we have 353 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 354
now we have 354 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 355
now we have 355 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 356
now we have 356 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 357
now we have 357 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 358
now we have 358 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 359
now we have 359 global state (path)!
Now in function: func_sig() in contract: AttackBridge
2 worklist added! now the worklist num is 360
now we have 360 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 359 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 358 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 357 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 356 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 355 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 354 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 353 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 352 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 351 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 350 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 349 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 348 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 347 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 346 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 345 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 344 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 343 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 342 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 341 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 340 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 339 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 338 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 337 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 336 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 335 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 334 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 333 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 332 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 331 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 330 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 329 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 328 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 327 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 326 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 325 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 324 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 323 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 322 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 321 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 320 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 319 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 318 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 317 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 316 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 315 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 314 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 313 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 312 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 311 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 310 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 309 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 308 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 307 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 306 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 305 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 304 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 303 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 302 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 301 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 302
now we have 302 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 303
now we have 303 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 304
now we have 304 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 305
now we have 305 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 306
now we have 306 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 307
now we have 307 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 308
now we have 308 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 309
now we have 309 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 310
now we have 310 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 311
now we have 311 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 312
now we have 312 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 313
now we have 313 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 314
now we have 314 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 315
now we have 315 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 316
now we have 316 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 317
now we have 317 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 318
now we have 318 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 319
now we have 319 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 320
now we have 320 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 321
now we have 321 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 322
now we have 322 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 323
now we have 323 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 324
now we have 324 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 325
now we have 325 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 326
now we have 326 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 327
now we have 327 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 328
now we have 328 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 329
now we have 329 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 330
now we have 330 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 331
now we have 331 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 332
now we have 332 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 333
now we have 333 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 334
now we have 334 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 335
now we have 335 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 336
now we have 336 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 337
now we have 337 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 338
now we have 338 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 339
now we have 339 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 340
now we have 340 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 341
now we have 341 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 342
now we have 342 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 343
now we have 343 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 344
now we have 344 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 345
now we have 345 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 346
now we have 346 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 347
now we have 347 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 348
now we have 348 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 349
now we have 349 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 350
now we have 350 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 351
now we have 351 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 352
now we have 352 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 353
now we have 353 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 354
now we have 354 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 355
now we have 355 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 356
now we have 356 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 357
now we have 357 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 358
now we have 358 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 359
now we have 359 global state (path)!
Now in function: fallback in contract: AttackBridge
2 worklist added! now the worklist num is 360
now we have 360 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 361
now we have 361 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 362
now we have 362 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 363
now we have 363 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 364
now we have 364 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 365
now we have 365 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 366
now we have 366 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 367
now we have 367 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 368
now we have 368 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 369
now we have 369 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 370
now we have 370 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 371
now we have 371 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 372
now we have 372 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 373
now we have 373 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 374
now we have 374 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 375
now we have 375 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 376
now we have 376 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 377
now we have 377 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 378
now we have 378 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 379
now we have 379 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 380
now we have 380 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 381
now we have 381 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 382
now we have 382 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 383
now we have 383 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 384
now we have 384 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 385
now we have 385 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 386
now we have 386 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 387
now we have 387 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 388
now we have 388 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 389
now we have 389 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 390
now we have 390 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 391
now we have 391 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 392
now we have 392 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 393
now we have 393 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 394
now we have 394 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 395
now we have 395 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 396
now we have 396 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 397
now we have 397 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 398
now we have 398 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 399
now we have 399 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 400
now we have 400 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 401
now we have 401 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 402
now we have 402 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 403
now we have 403 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 404
now we have 404 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 405
now we have 405 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 406
now we have 406 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 407
now we have 407 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 408
now we have 408 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 409
now we have 409 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 410
now we have 410 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 411
now we have 411 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 412
now we have 412 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 413
now we have 413 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 414
now we have 414 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 415
now we have 415 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 416
now we have 416 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 417
now we have 417 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 418
now we have 418 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 419
now we have 419 global state (path)!
Now in function: last_caller_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 420
now we have 420 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 419 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 418 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 417 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 416 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 415 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 414 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 413 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 412 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 411 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 410 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 409 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 408 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 407 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 406 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 405 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 404 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 403 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 402 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 401 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 400 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 399 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 398 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 397 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 396 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 395 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 394 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 393 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 392 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 391 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 390 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 389 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 388 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 387 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 386 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 385 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 384 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 383 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 382 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 381 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 380 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 379 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 378 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 377 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 376 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 375 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 374 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 373 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 372 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 371 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 370 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 369 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 368 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 367 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 366 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 365 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 364 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 363 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 362 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 361 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 360 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 361
now we have 361 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 362
now we have 362 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 363
now we have 363 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 364
now we have 364 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 365
now we have 365 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 366
now we have 366 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 367
now we have 367 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 368
now we have 368 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 369
now we have 369 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 370
now we have 370 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 371
now we have 371 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 372
now we have 372 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 373
now we have 373 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 374
now we have 374 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 375
now we have 375 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 376
now we have 376 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 377
now we have 377 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 378
now we have 378 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 379
now we have 379 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 380
now we have 380 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 381
now we have 381 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 382
now we have 382 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 383
now we have 383 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 384
now we have 384 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 385
now we have 385 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 386
now we have 386 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 387
now we have 387 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 388
now we have 388 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 389
now we have 389 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 390
now we have 390 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 391
now we have 391 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 392
now we have 392 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 393
now we have 393 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 394
now we have 394 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 395
now we have 395 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 396
now we have 396 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 397
now we have 397 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 398
now we have 398 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 399
now we have 399 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 400
now we have 400 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 401
now we have 401 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 402
now we have 402 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 403
now we have 403 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 404
now we have 404 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 405
now we have 405 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 406
now we have 406 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 407
now we have 407 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 408
now we have 408 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 409
now we have 409 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 410
now we have 410 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 411
now we have 411 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 412
now we have 412 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 413
now we have 413 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 414
now we have 414 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 415
now we have 415 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 416
now we have 416 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 417
now we have 417 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 418
now we have 418 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 419
now we have 419 global state (path)!
Now in function: victim_addr() in contract: AttackBridge
2 worklist added! now the worklist num is 420
now we have 420 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 419 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 418 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 417 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 416 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 415 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 414 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 413 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 412 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 411 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 410 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 409 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 408 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 407 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 406 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 405 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 404 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 403 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 402 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 401 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 400 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 399 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 398 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 397 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 396 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 395 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 394 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 393 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 392 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 391 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 390 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 389 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 388 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 387 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 386 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 385 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 384 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 383 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 382 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 381 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 380 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 379 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 378 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 377 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 376 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 375 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 374 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 373 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 372 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 371 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 370 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 369 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 368 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 367 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 366 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 365 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 364 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 363 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 362 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 361 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 360 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 359 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 358 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 357 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 356 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 355 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 354 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 353 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 352 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 351 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 350 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 349 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 348 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 347 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 346 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 345 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 344 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 343 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 342 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 341 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 340 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 339 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 338 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 337 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 336 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 335 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 334 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 333 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 332 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 331 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 330 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 329 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 328 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 327 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 326 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 325 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 324 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 323 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 322 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 321 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 320 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 319 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 318 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 317 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 316 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 315 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 314 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 313 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 312 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 311 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 310 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 309 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 308 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 307 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 306 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 305 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 304 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 303 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 302 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 301 global state (path)!
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 300 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 301
now we have 301 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 302
now we have 302 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 303
now we have 303 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 304
now we have 304 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 305
now we have 305 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 306
now we have 306 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 307
now we have 307 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 308
now we have 308 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 309
now we have 309 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 310
now we have 310 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 311
now we have 311 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 312
now we have 312 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 313
now we have 313 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 314
now we have 314 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 315
now we have 315 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 316
now we have 316 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 317
now we have 317 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 318
now we have 318 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 319
now we have 319 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 320
now we have 320 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 321
now we have 321 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 322
now we have 322 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 323
now we have 323 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 324
now we have 324 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 325
now we have 325 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 326
now we have 326 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 327
now we have 327 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 328
now we have 328 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 329
now we have 329 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 330
now we have 330 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 331
now we have 331 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 332
now we have 332 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 333
now we have 333 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 334
now we have 334 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 335
now we have 335 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 336
now we have 336 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 337
now we have 337 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 338
now we have 338 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 339
now we have 339 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 340
now we have 340 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 341
now we have 341 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 342
now we have 342 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 343
now we have 343 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 344
now we have 344 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 345
now we have 345 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 346
now we have 346 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 347
now we have 347 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 348
now we have 348 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 349
now we have 349 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 350
now we have 350 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 351
now we have 351 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 352
now we have 352 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 353
now we have 353 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 354
now we have 354 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 355
now we have 355 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 356
now we have 356 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 357
now we have 357 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 358
now we have 358 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 359
now we have 359 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 360
now we have 360 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 359 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 358 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 357 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 356 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 355 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 354 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 353 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 352 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 351 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 350 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 349 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 348 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 347 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 346 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 345 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 344 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 343 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 342 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 341 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 340 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 339 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 338 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 337 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 336 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 335 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 334 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 333 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 332 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 331 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 330 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 329 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 328 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 327 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 326 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 325 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 324 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 323 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 322 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 321 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 320 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 319 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 318 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 317 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 316 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 315 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 314 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 313 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 312 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 311 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 310 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 309 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 308 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 307 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 306 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 305 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 304 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 303 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 302 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 301 global state (path)!
now in msTX end, the activate_function is: counter()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 300 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 299 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 298 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 297 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 296 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 295 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 294 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 293 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 292 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 291 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 290 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 289 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 288 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 287 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 286 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 285 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 284 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 283 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 282 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 281 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 280 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 279 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 278 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 277 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 276 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 275 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 274 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 273 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 272 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 271 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 270 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 269 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 268 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 267 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 266 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 265 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 264 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 263 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 262 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 261 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 260 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 259 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 258 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 257 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 256 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 255 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 254 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 253 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 252 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 251 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 250 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 249 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 248 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 247 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 246 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 245 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 244 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 243 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 242 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 241 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 240 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 241
now we have 241 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 242
now we have 242 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 243
now we have 243 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 244
now we have 244 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 245
now we have 245 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 246
now we have 246 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 247
now we have 247 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 248
now we have 248 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 249
now we have 249 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 250
now we have 250 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 251
now we have 251 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 252
now we have 252 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 253
now we have 253 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 254
now we have 254 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 255
now we have 255 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 256
now we have 256 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 257
now we have 257 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 258
now we have 258 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 259
now we have 259 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 260
now we have 260 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 261
now we have 261 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 262
now we have 262 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 263
now we have 263 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 264
now we have 264 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 265
now we have 265 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 266
now we have 266 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 267
now we have 267 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 268
now we have 268 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 269
now we have 269 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 270
now we have 270 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 271
now we have 271 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 272
now we have 272 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 273
now we have 273 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 274
now we have 274 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 275
now we have 275 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 276
now we have 276 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 277
now we have 277 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 278
now we have 278 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 279
now we have 279 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 280
now we have 280 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 281
now we have 281 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 282
now we have 282 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 283
now we have 283 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 284
now we have 284 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 285
now we have 285 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 286
now we have 286 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 287
now we have 287 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 288
now we have 288 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 289
now we have 289 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 290
now we have 290 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 291
now we have 291 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 292
now we have 292 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 293
now we have 293 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 294
now we have 294 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 295
now we have 295 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 296
now we have 296 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 297
now we have 297 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 298
now we have 298 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 299
now we have 299 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 300
now we have 300 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 299 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 298 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 297 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 296 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 295 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 294 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 293 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 292 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 291 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 290 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 289 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 288 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 287 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 286 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 285 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 284 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 283 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 282 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 281 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 280 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 279 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 278 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 277 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 276 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 275 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 274 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 273 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 272 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 271 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 270 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 269 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 268 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 267 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 266 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 265 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 264 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 263 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 262 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 261 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 260 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 259 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 258 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 257 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 256 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 255 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 254 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 253 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 252 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 251 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 250 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 249 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 248 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 247 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 246 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 245 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 244 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 243 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 242 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 241 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 240 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 239 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 238 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 237 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 236 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 235 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 234 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 233 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 232 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 231 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 230 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 229 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 228 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 227 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 226 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 225 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 224 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 223 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 222 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 221 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 220 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 219 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 218 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 217 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 216 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 215 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 214 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 213 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 212 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 211 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 210 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 209 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 208 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 207 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 206 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 205 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 204 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 203 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 202 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 201 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 200 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 199 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 198 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 197 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 196 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 195 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 194 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 193 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 192 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 191 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 190 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 189 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 188 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 187 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 186 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 185 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 184 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 183 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 182 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 181 global state (path)!
now in msTX end, the activate_function is: last_caller_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 180 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 179 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 178 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 177 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 176 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 175 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 174 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 173 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 172 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 171 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 170 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 169 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 168 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 167 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 166 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 165 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 164 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 163 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 162 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 161 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 160 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 159 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 158 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 157 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 156 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 155 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 154 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 153 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 152 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 151 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 150 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 149 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 148 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 147 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 146 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 145 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 144 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 143 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 142 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 141 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 140 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 139 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 138 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 137 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 136 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 135 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 134 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 133 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 132 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 131 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 130 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 129 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 128 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 127 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 126 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 125 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 124 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 123 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 122 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 121 global state (path)!
now in msTX end, the activate_function is: victim_addr()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 120 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 121
now we have 121 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 122
now we have 122 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 123
now we have 123 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 124
now we have 124 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 125
now we have 125 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 126
now we have 126 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 127
now we have 127 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 128
now we have 128 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 129
now we have 129 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 130
now we have 130 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 131
now we have 131 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 132
now we have 132 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 133
now we have 133 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 134
now we have 134 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 135
now we have 135 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 136
now we have 136 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 137
now we have 137 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 138
now we have 138 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 139
now we have 139 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 140
now we have 140 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 141
now we have 141 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 142
now we have 142 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 143
now we have 143 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 144
now we have 144 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 145
now we have 145 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 146
now we have 146 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 147
now we have 147 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 148
now we have 148 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 149
now we have 149 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 150
now we have 150 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 151
now we have 151 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 152
now we have 152 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 153
now we have 153 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 154
now we have 154 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 155
now we have 155 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 156
now we have 156 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 157
now we have 157 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 158
now we have 158 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 159
now we have 159 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 160
now we have 160 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 161
now we have 161 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 162
now we have 162 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 163
now we have 163 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 164
now we have 164 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 165
now we have 165 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 166
now we have 166 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 167
now we have 167 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 168
now we have 168 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 169
now we have 169 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 170
now we have 170 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 171
now we have 171 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 172
now we have 172 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 173
now we have 173 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 174
now we have 174 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 175
now we have 175 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 176
now we have 176 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 177
now we have 177 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 178
now we have 178 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 179
now we have 179 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 180
now we have 180 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 179 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 178 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 177 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 176 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 175 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 174 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 173 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 172 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 171 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 170 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 169 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 168 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 167 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 166 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 165 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 164 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 163 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 162 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 161 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 160 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 159 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 158 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 157 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 156 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 155 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 154 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 153 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 152 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 42 from sender_42 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 151 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 43 from sender_43 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 150 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 44 from sender_44 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 149 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 148 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 46 from sender_46 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 147 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 47 from sender_47 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 146 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 48 from sender_48 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 145 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 49 from sender_49 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 144 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 50 from sender_50 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 143 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 51 from sender_51 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 142 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 52 from sender_52 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 141 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 53 from sender_53 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 140 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 54 from sender_54 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 139 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 55 from sender_55 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 138 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 56 from sender_56 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 137 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 57 from sender_57 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 136 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 58 from sender_58 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 135 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 59 from sender_59 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 134 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 60 from sender_60 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 133 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 61 from sender_61 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 132 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 62 from sender_62 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 131 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 63 from sender_63 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 130 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 64 from sender_64 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 129 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 65 from sender_65 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 128 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 127 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 67 from sender_67 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 126 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 68 from sender_68 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 125 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 124 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 123 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 71 from sender_71 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 122 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 72 from sender_72 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 121 global state (path)!
now in msTX end, the activate_function is: attack(uint256,string,address)
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 73 from sender_73 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
End Transaction with messagecall Revert: [%s]
call_chain is []
now we have 120 global state (path)!
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
unreached path
Now in function: func_sig() in contract: AttackBridge
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 14 from sender_14 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 119 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 15 from sender_15 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 118 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 16 from sender_16 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 117 global state (path)!
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 17 from sender_17 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 116 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 18 from sender_18 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 115 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 19 from sender_19 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 114 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 20 from sender_20 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 113 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 21 from sender_21 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 112 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 22 from sender_22 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 111 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 23 from sender_23 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 110 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 24 from sender_24 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 109 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 25 from sender_25 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 108 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 26 from sender_26 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 107 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 27 from sender_27 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 106 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 28 from sender_28 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 105 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 29 from sender_29 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 104 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 30 from sender_30 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 103 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 31 from sender_31 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 102 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 32 from sender_32 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 101 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 33 from sender_33 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 100 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 34 from sender_34 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 99 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 35 from sender_35 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 98 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 36 from sender_36 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 97 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 37 from sender_37 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 96 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 38 from sender_38 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 95 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 39 from sender_39 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 94 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 40 from sender_40 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 93 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 41 from sender_41 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 92 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 45 from sender_45 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 91 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 66 from sender_66 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 90 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 69 from sender_69 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 89 global state (path)!
[Warning!!!] Return with symbolic length or offset. Not supported
now in msTX end, the activate_function is: func_sig()
try to print global_state_call_chain: []
END with EOA TX CASE: MessageCallTransaction 70 from sender_70 to 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef ***********
output EOA case global_state: []
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is []
now we have 88 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 89
now we have 89 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 90
now we have 90 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 91
now we have 91 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 92
now we have 92 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 93
now we have 93 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 94
now we have 94 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 95
now we have 95 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 96
now we have 96 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 97
now we have 97 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 98
now we have 98 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 99
now we have 99 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 100
now we have 100 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 101
now we have 101 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 102
now we have 102 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 103
now we have 103 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 104
now we have 104 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 105
now we have 105 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 106
now we have 106 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 107
now we have 107 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 108
now we have 108 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 109
now we have 109 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 110
now we have 110 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 111
now we have 111 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 112
now we have 112 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 113
now we have 113 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 114
now we have 114 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 115
now we have 115 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 116
now we have 116 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 117
now we have 117 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 118
now we have 118 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 119
now we have 119 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 120
now we have 120 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 121
now we have 121 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 122
now we have 122 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 123
now we have 123 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 124
now we have 124 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 125
now we have 125 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 126
now we have 126 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 127
now we have 127 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 128
now we have 128 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 129
now we have 129 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 130
now we have 130 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 131
now we have 131 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 132
now we have 132 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 133
now we have 133 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 134
now we have 134 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 135
now we have 135 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 136
now we have 136 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 137
now we have 137 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 138
now we have 138 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 139
now we have 139 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 140
now we have 140 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 141
now we have 141 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 142
now we have 142 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 143
now we have 143 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 144
now we have 144 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 145
now we have 145 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 146
now we have 146 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 147
now we have 147 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 148
now we have 148 global state (path)!
now we have 147 global state (path)!
now we have 146 global state (path)!
now we have 145 global state (path)!
now we have 144 global state (path)!
now we have 143 global state (path)!
now we have 142 global state (path)!
now we have 141 global state (path)!
now we have 140 global state (path)!
now we have 139 global state (path)!
now we have 138 global state (path)!
now we have 137 global state (path)!
now we have 136 global state (path)!
now we have 135 global state (path)!
now we have 134 global state (path)!
now we have 133 global state (path)!
now we have 132 global state (path)!
now we have 131 global state (path)!
now we have 130 global state (path)!
now we have 129 global state (path)!
now we have 128 global state (path)!
now we have 127 global state (path)!
now we have 126 global state (path)!
now we have 125 global state (path)!
now we have 124 global state (path)!
now we have 123 global state (path)!
now we have 122 global state (path)!
now we have 121 global state (path)!
now we have 120 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 121
now we have 121 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 122
now we have 122 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 123
now we have 123 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 124
now we have 124 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 125
now we have 125 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 126
now we have 126 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 127
now we have 127 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 128
now we have 128 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 129
now we have 129 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 130
now we have 130 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 131
now we have 131 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 132
now we have 132 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 133
now we have 133 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 134
now we have 134 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 135
now we have 135 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 136
now we have 136 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 137
now we have 137 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 138
now we have 138 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 139
now we have 139 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 140
now we have 140 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 141
now we have 141 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 142
now we have 142 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 143
now we have 143 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 144
now we have 144 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 145
now we have 145 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 146
now we have 146 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 147
now we have 147 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 148
now we have 148 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 149
now we have 149 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 150
now we have 150 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 151
now we have 151 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 152
now we have 152 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 153
now we have 153 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 154
now we have 154 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 155
now we have 155 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 156
now we have 156 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 157
now we have 157 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 158
now we have 158 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 159
now we have 159 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 160
now we have 160 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 161
now we have 161 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 162
now we have 162 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 163
now we have 163 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 164
now we have 164 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 165
now we have 165 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 166
now we have 166 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 167
now we have 167 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 168
now we have 168 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 169
now we have 169 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 170
now we have 170 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 171
now we have 171 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 172
now we have 172 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 173
now we have 173 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 174
now we have 174 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 175
now we have 175 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 176
now we have 176 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 177
now we have 177 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 178
now we have 178 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 179
now we have 179 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 180
now we have 180 global state (path)!
now we have 179 global state (path)!
now we have 178 global state (path)!
now we have 177 global state (path)!
now we have 176 global state (path)!
now we have 175 global state (path)!
now we have 174 global state (path)!
now we have 173 global state (path)!
now we have 172 global state (path)!
now we have 171 global state (path)!
now we have 170 global state (path)!
now we have 169 global state (path)!
now we have 168 global state (path)!
now we have 167 global state (path)!
now we have 166 global state (path)!
now we have 165 global state (path)!
now we have 164 global state (path)!
now we have 163 global state (path)!
now we have 162 global state (path)!
now we have 161 global state (path)!
now we have 160 global state (path)!
now we have 159 global state (path)!
now we have 158 global state (path)!
now we have 157 global state (path)!
now we have 156 global state (path)!
now we have 155 global state (path)!
now we have 154 global state (path)!
now we have 153 global state (path)!
now we have 152 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 153
now we have 153 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 154
now we have 154 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 155
now we have 155 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 156
now we have 156 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 157
now we have 157 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 158
now we have 158 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 159
now we have 159 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 160
now we have 160 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 161
now we have 161 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 162
now we have 162 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 163
now we have 163 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 164
now we have 164 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 165
now we have 165 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 166
now we have 166 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 167
now we have 167 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 168
now we have 168 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 169
now we have 169 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 170
now we have 170 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 171
now we have 171 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 172
now we have 172 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 173
now we have 173 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 174
now we have 174 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 175
now we have 175 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 176
now we have 176 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 177
now we have 177 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 178
now we have 178 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 179
now we have 179 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 180
now we have 180 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 181
now we have 181 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 182
now we have 182 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 183
now we have 183 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 184
now we have 184 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 185
now we have 185 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 186
now we have 186 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 187
now we have 187 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 188
now we have 188 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 189
now we have 189 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 190
now we have 190 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 191
now we have 191 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 192
now we have 192 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 193
now we have 193 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 194
now we have 194 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 195
now we have 195 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 196
now we have 196 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 197
now we have 197 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 198
now we have 198 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 199
now we have 199 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 200
now we have 200 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 201
now we have 201 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 202
now we have 202 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 203
now we have 203 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 204
now we have 204 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 205
now we have 205 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 206
now we have 206 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 207
now we have 207 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 208
now we have 208 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 209
now we have 209 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 210
now we have 210 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 211
now we have 211 global state (path)!
now we have 210 global state (path)!
now we have 209 global state (path)!
now we have 208 global state (path)!
now we have 207 global state (path)!
now we have 206 global state (path)!
now we have 205 global state (path)!
now we have 204 global state (path)!
now we have 203 global state (path)!
now we have 202 global state (path)!
now we have 201 global state (path)!
now we have 200 global state (path)!
now we have 199 global state (path)!
now we have 198 global state (path)!
now we have 197 global state (path)!
now we have 196 global state (path)!
now we have 195 global state (path)!
now we have 194 global state (path)!
now we have 193 global state (path)!
now we have 192 global state (path)!
now we have 191 global state (path)!
now we have 190 global state (path)!
now we have 189 global state (path)!
now we have 188 global state (path)!
now we have 187 global state (path)!
now we have 186 global state (path)!
now we have 185 global state (path)!
now we have 184 global state (path)!
now we have 183 global state (path)!
now we have 182 global state (path)!
now we have 181 global state (path)!
now we have 180 global state (path)!
now we have 179 global state (path)!
now we have 178 global state (path)!
now we have 177 global state (path)!
now we have 176 global state (path)!
now we have 175 global state (path)!
now we have 174 global state (path)!
now we have 173 global state (path)!
now we have 172 global state (path)!
now we have 171 global state (path)!
now we have 170 global state (path)!
now we have 169 global state (path)!
now we have 168 global state (path)!
now we have 167 global state (path)!
now we have 166 global state (path)!
now we have 165 global state (path)!
now we have 164 global state (path)!
now we have 163 global state (path)!
now we have 162 global state (path)!
now we have 161 global state (path)!
now we have 160 global state (path)!
now we have 159 global state (path)!
now we have 158 global state (path)!
now we have 157 global state (path)!
now we have 156 global state (path)!
now we have 155 global state (path)!
now we have 154 global state (path)!
now we have 153 global state (path)!
now we have 152 global state (path)!
now we have 151 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Warning !!!world_state unsatisfied
now we have 150 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 151
now we have 151 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 152
now we have 152 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 153
now we have 153 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 154
now we have 154 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 155
now we have 155 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 156
now we have 156 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 157
now we have 157 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 158
now we have 158 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 159
now we have 159 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 160
now we have 160 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 161
now we have 161 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 162
now we have 162 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 163
now we have 163 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 164
now we have 164 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 165
now we have 165 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 166
now we have 166 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 167
now we have 167 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 168
now we have 168 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 169
now we have 169 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 170
now we have 170 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 171
now we have 171 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 172
now we have 172 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 173
now we have 173 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 174
now we have 174 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 175
now we have 175 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 176
now we have 176 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 177
now we have 177 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 178
now we have 178 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 179
now we have 179 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 180
now we have 180 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 181
now we have 181 global state (path)!
Now in function: attack(uint256,string,address) in contract: AttackBridge
2 worklist added! now the worklist num is 182
now we have 182 global state (path)!
Warning !!!world_state unsatisfied
now we have 181 global state (path)!
Warning !!!world_state unsatisfied
now we have 180 global state (path)!
Warning !!!world_state unsatisfied
now we have 179 global state (path)!
Warning !!!world_state unsatisfied
now we have 178 global state (path)!
Warning !!!world_state unsatisfied
now we have 177 global state (path)!
Warning !!!world_state unsatisfied
now we have 176 global state (path)!
Warning !!!world_state unsatisfied
now we have 175 global state (path)!
Warning !!!world_state unsatisfied
now we have 174 global state (path)!
Warning !!!world_state unsatisfied
now we have 173 global state (path)!
Warning !!!world_state unsatisfied
now we have 172 global state (path)!
Warning !!!world_state unsatisfied
now we have 171 global state (path)!
Warning !!!world_state unsatisfied
now we have 170 global state (path)!
Warning !!!world_state unsatisfied
now we have 169 global state (path)!
Warning !!!world_state unsatisfied
now we have 168 global state (path)!
Warning !!!world_state unsatisfied
now we have 167 global state (path)!
Warning !!!world_state unsatisfied
now we have 166 global state (path)!
Warning !!!world_state unsatisfied
now we have 165 global state (path)!
Warning !!!world_state unsatisfied
now we have 164 global state (path)!
Warning !!!world_state unsatisfied
now we have 163 global state (path)!
Warning !!!world_state unsatisfied
now we have 162 global state (path)!
Warning !!!world_state unsatisfied
now we have 161 global state (path)!
Warning !!!world_state unsatisfied
now we have 160 global state (path)!
Warning !!!world_state unsatisfied
now we have 159 global state (path)!
Warning !!!world_state unsatisfied
now we have 158 global state (path)!
Warning !!!world_state unsatisfied
now we have 157 global state (path)!
Warning !!!world_state unsatisfied
now we have 156 global state (path)!
Warning !!!world_state unsatisfied
now we have 155 global state (path)!
Warning !!!world_state unsatisfied
now we have 154 global state (path)!
Warning !!!world_state unsatisfied
now we have 153 global state (path)!
Warning !!!world_state unsatisfied
now we have 152 global state (path)!
Warning !!!world_state unsatisfied
now we have 151 global state (path)!
Warning !!!world_state unsatisfied
now we have 150 global state (path)!
Warning !!!world_state unsatisfied
now we have 149 global state (path)!
Warning !!!world_state unsatisfied
now we have 148 global state (path)!
Warning !!!world_state unsatisfied
now we have 147 global state (path)!
Warning !!!world_state unsatisfied
now we have 146 global state (path)!
Warning !!!world_state unsatisfied
now we have 145 global state (path)!
Warning !!!world_state unsatisfied
now we have 144 global state (path)!
Warning !!!world_state unsatisfied
now we have 143 global state (path)!
Warning !!!world_state unsatisfied
now we have 142 global state (path)!
Warning !!!world_state unsatisfied
now we have 141 global state (path)!
Warning !!!world_state unsatisfied
now we have 140 global state (path)!
Warning !!!world_state unsatisfied
now we have 139 global state (path)!
Warning !!!world_state unsatisfied
now we have 138 global state (path)!
Warning !!!world_state unsatisfied
now we have 137 global state (path)!
Warning !!!world_state unsatisfied
now we have 136 global state (path)!
Warning !!!world_state unsatisfied
now we have 135 global state (path)!
Warning !!!world_state unsatisfied
now we have 134 global state (path)!
Warning !!!world_state unsatisfied
now we have 133 global state (path)!
Warning !!!world_state unsatisfied
now we have 132 global state (path)!
Warning !!!world_state unsatisfied
now we have 131 global state (path)!
Warning !!!world_state unsatisfied
now we have 130 global state (path)!
Warning !!!world_state unsatisfied
now we have 129 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
now we have 128 global state (path)!
unreached path
now we have 127 global state (path)!
unreached path
now we have 126 global state (path)!
unreached path
now we have 125 global state (path)!
unreached path
now we have 124 global state (path)!
unreached path
now we have 123 global state (path)!
unreached path
now we have 122 global state (path)!
unreached path
now we have 121 global state (path)!
unreached path
now we have 120 global state (path)!
unreached path
now we have 119 global state (path)!
unreached path
now we have 118 global state (path)!
unreached path
now we have 117 global state (path)!
unreached path
now we have 116 global state (path)!
unreached path
now we have 115 global state (path)!
unreached path
now we have 114 global state (path)!
unreached path
now we have 113 global state (path)!
unreached path
now we have 112 global state (path)!
unreached path
now we have 111 global state (path)!
unreached path
now we have 110 global state (path)!
unreached path
now we have 109 global state (path)!
unreached path
now we have 108 global state (path)!
unreached path
now we have 107 global state (path)!
unreached path
now we have 106 global state (path)!
unreached path
now we have 105 global state (path)!
unreached path
now we have 104 global state (path)!
unreached path
now we have 103 global state (path)!
unreached path
now we have 102 global state (path)!
unreached path
now we have 101 global state (path)!
unreached path
now we have 100 global state (path)!
unreached path
now we have 99 global state (path)!
unreached path
now we have 98 global state (path)!
unreached path
now we have 97 global state (path)!
unreached path
now we have 96 global state (path)!
unreached path
now we have 95 global state (path)!
unreached path
now we have 94 global state (path)!
unreached path
now we have 93 global state (path)!
unreached path
now we have 92 global state (path)!
unreached path
now we have 91 global state (path)!
unreached path
now we have 90 global state (path)!
unreached path
now we have 89 global state (path)!
unreached path
now we have 88 global state (path)!
unreached path
now we have 87 global state (path)!
unreached path
now we have 86 global state (path)!
unreached path
now we have 85 global state (path)!
unreached path
now we have 84 global state (path)!
unreached path
now we have 83 global state (path)!
unreached path
now we have 82 global state (path)!
unreached path
now we have 81 global state (path)!
unreached path
now we have 80 global state (path)!
unreached path
now we have 79 global state (path)!
unreached path
now we have 78 global state (path)!
unreached path
now we have 77 global state (path)!
unreached path
now we have 76 global state (path)!
unreached path
now we have 75 global state (path)!
unreached path
now we have 74 global state (path)!
unreached path
now we have 73 global state (path)!
unreached path
now we have 72 global state (path)!
unreached path
now we have 71 global state (path)!
unreached path
now we have 70 global state (path)!
unreached path
now we have 69 global state (path)!
unreached path
now we have 68 global state (path)!
unreached path
now we have 67 global state (path)!
unreached path
now we have 66 global state (path)!
unreached path
now we have 65 global state (path)!
unreached path
now we have 64 global state (path)!
unreached path
now we have 63 global state (path)!
unreached path
now we have 62 global state (path)!
unreached path
now we have 61 global state (path)!
unreached path
now we have 60 global state (path)!
unreached path
now we have 59 global state (path)!
unreached path
now we have 58 global state (path)!
unreached path
now we have 57 global state (path)!
unreached path
now we have 56 global state (path)!
unreached path
now we have 55 global state (path)!
unreached path
now we have 54 global state (path)!
unreached path
now we have 53 global state (path)!
unreached path
now we have 52 global state (path)!
unreached path
now we have 51 global state (path)!
unreached path
now we have 50 global state (path)!
unreached path
now we have 49 global state (path)!
unreached path
now we have 48 global state (path)!
unreached path
now we have 47 global state (path)!
unreached path
now we have 46 global state (path)!
unreached path
now we have 45 global state (path)!
unreached path
now we have 44 global state (path)!
unreached path
now we have 43 global state (path)!
unreached path
now we have 42 global state (path)!
unreached path
now we have 41 global state (path)!
unreached path
now we have 40 global state (path)!
unreached path
now we have 39 global state (path)!
unreached path
now we have 38 global state (path)!
unreached path
now we have 37 global state (path)!
unreached path
now we have 36 global state (path)!
unreached path
now we have 35 global state (path)!
unreached path
now we have 34 global state (path)!
unreached path
now we have 33 global state (path)!
unreached path
now we have 32 global state (path)!
unreached path
now we have 31 global state (path)!
unreached path
now we have 30 global state (path)!
unreached path
now we have 29 global state (path)!
unreached path
now we have 28 global state (path)!
unreached path
now we have 27 global state (path)!
unreached path
now we have 26 global state (path)!
unreached path
now we have 25 global state (path)!
unreached path
now we have 24 global state (path)!
unreached path
now we have 23 global state (path)!
unreached path
now we have 22 global state (path)!
unreached path
now we have 21 global state (path)!
unreached path
now we have 20 global state (path)!
unreached path
now we have 19 global state (path)!
unreached path
now we have 18 global state (path)!
unreached path
now we have 17 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
now we have 6 global state (path)!
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
unreached path
Now in function: attack(uint256,string,address) in contract: AttackBridge
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Warning !!!world_state unsatisfied
Finished symbolic execution


================ Print openstates call_chain ================
print 0th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 1th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 2th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 3th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 4th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 5th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 6th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 7th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 8th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 9th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 10th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 11th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 12th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 13th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 14th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 15th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 16th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 17th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 18th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 19th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 20th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 21th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 22th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 23th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 24th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 25th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 26th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 27th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 28th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 29th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 30th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 31th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 32th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 33th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 34th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 35th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 36th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 37th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 38th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 39th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 40th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 41th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 42th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 43th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 44th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 45th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 46th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 47th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 48th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 49th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 50th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 51th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 52th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 53th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 54th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 55th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 56th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 57th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 58th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 59th world_state`s call_chain
[['START'], ['EOA', ''], ['AttackBridge', 'counter()'], ['END']]
----------------------------------------------------
print 60th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 61th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 62th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 63th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 64th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 65th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 66th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 67th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 68th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 69th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 70th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 71th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 72th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 73th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 74th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 75th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 76th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 77th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 78th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 79th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 80th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 81th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 82th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 83th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 84th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 85th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 86th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 87th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 88th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 89th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 90th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 91th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 92th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 93th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 94th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 95th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 96th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 97th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 98th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 99th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 100th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 101th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 102th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 103th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 104th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 105th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 106th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 107th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 108th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 109th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 110th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 111th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 112th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 113th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 114th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 115th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 116th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 117th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 118th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 119th world_state`s call_chain
[['START'], ['EOA', ''], ['caller', 'addr()'], ['END']]
----------------------------------------------------
print 120th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 121th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 122th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 123th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 124th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 125th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 126th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 127th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 128th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 129th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 130th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 131th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 132th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 133th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 134th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 135th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 136th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 137th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 138th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 139th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 140th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 141th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 142th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 143th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 144th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 145th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 146th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 147th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 148th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 149th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 150th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 151th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 152th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 153th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 154th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 155th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 156th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 157th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 158th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 159th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 160th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 161th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 162th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 163th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 164th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 165th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 166th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 167th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 168th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 169th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 170th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 171th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 172th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 173th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 174th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 175th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 176th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 177th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 178th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 179th world_state`s call_chain
[['START'], ['EOA', ''], ['victim', 'addr()'], ['END']]
----------------------------------------------------
print 180th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 181th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 182th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 183th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 184th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 185th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 186th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 187th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 188th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 189th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 190th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 191th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 192th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 193th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 194th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 195th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 196th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 197th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 198th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 199th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 200th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 201th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 202th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 203th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 204th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 205th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 206th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 207th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 208th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 209th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 210th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------
print 211th world_state`s call_chain
[['START'], ['EOA', ''], ['func', 'sig()'], ['END']]
----------------------------------------------------


================ Print openstates call_chain finish ================
print report in [0]th open_state
The analysis was completed successfully. No issues were detected.

print report in [1]th open_state
The analysis was completed successfully. No issues were detected.

print report in [2]th open_state
The analysis was completed successfully. No issues were detected.

print report in [3]th open_state
The analysis was completed successfully. No issues were detected.

print report in [4]th open_state
The analysis was completed successfully. No issues were detected.

print report in [5]th open_state
The analysis was completed successfully. No issues were detected.

print report in [6]th open_state
The analysis was completed successfully. No issues were detected.

print report in [7]th open_state
The analysis was completed successfully. No issues were detected.

print report in [8]th open_state
The analysis was completed successfully. No issues were detected.

print report in [9]th open_state
The analysis was completed successfully. No issues were detected.

print report in [10]th open_state
The analysis was completed successfully. No issues were detected.

print report in [11]th open_state
The analysis was completed successfully. No issues were detected.

print report in [12]th open_state
The analysis was completed successfully. No issues were detected.

print report in [13]th open_state
The analysis was completed successfully. No issues were detected.

print report in [14]th open_state
The analysis was completed successfully. No issues were detected.

print report in [15]th open_state
The analysis was completed successfully. No issues were detected.

print report in [16]th open_state
The analysis was completed successfully. No issues were detected.

print report in [17]th open_state
The analysis was completed successfully. No issues were detected.

print report in [18]th open_state
The analysis was completed successfully. No issues were detected.

print report in [19]th open_state
The analysis was completed successfully. No issues were detected.

print report in [20]th open_state
The analysis was completed successfully. No issues were detected.

print report in [21]th open_state
The analysis was completed successfully. No issues were detected.

print report in [22]th open_state
The analysis was completed successfully. No issues were detected.

print report in [23]th open_state
The analysis was completed successfully. No issues were detected.

print report in [24]th open_state
The analysis was completed successfully. No issues were detected.

print report in [25]th open_state
The analysis was completed successfully. No issues were detected.

print report in [26]th open_state
The analysis was completed successfully. No issues were detected.

print report in [27]th open_state
The analysis was completed successfully. No issues were detected.

print report in [28]th open_state
The analysis was completed successfully. No issues were detected.

print report in [29]th open_state
The analysis was completed successfully. No issues were detected.

print report in [30]th open_state
The analysis was completed successfully. No issues were detected.

print report in [31]th open_state
The analysis was completed successfully. No issues were detected.

print report in [32]th open_state
The analysis was completed successfully. No issues were detected.

print report in [33]th open_state
The analysis was completed successfully. No issues were detected.

print report in [34]th open_state
The analysis was completed successfully. No issues were detected.

print report in [35]th open_state
The analysis was completed successfully. No issues were detected.

print report in [36]th open_state
The analysis was completed successfully. No issues were detected.

print report in [37]th open_state
The analysis was completed successfully. No issues were detected.

print report in [38]th open_state
The analysis was completed successfully. No issues were detected.

print report in [39]th open_state
The analysis was completed successfully. No issues were detected.

print report in [40]th open_state
The analysis was completed successfully. No issues were detected.

print report in [41]th open_state
The analysis was completed successfully. No issues were detected.

print report in [42]th open_state
The analysis was completed successfully. No issues were detected.

print report in [43]th open_state
The analysis was completed successfully. No issues were detected.

print report in [44]th open_state
The analysis was completed successfully. No issues were detected.

print report in [45]th open_state
The analysis was completed successfully. No issues were detected.

print report in [46]th open_state
The analysis was completed successfully. No issues were detected.

print report in [47]th open_state
The analysis was completed successfully. No issues were detected.

print report in [48]th open_state
The analysis was completed successfully. No issues were detected.

print report in [49]th open_state
The analysis was completed successfully. No issues were detected.

print report in [50]th open_state
The analysis was completed successfully. No issues were detected.

print report in [51]th open_state
The analysis was completed successfully. No issues were detected.

print report in [52]th open_state
The analysis was completed successfully. No issues were detected.

print report in [53]th open_state
The analysis was completed successfully. No issues were detected.

print report in [54]th open_state
The analysis was completed successfully. No issues were detected.

print report in [55]th open_state
The analysis was completed successfully. No issues were detected.

print report in [56]th open_state
The analysis was completed successfully. No issues were detected.

print report in [57]th open_state
The analysis was completed successfully. No issues were detected.

print report in [58]th open_state
The analysis was completed successfully. No issues were detected.

print report in [59]th open_state
The analysis was completed successfully. No issues were detected.

print report in [60]th open_state
The analysis was completed successfully. No issues were detected.

print report in [61]th open_state
The analysis was completed successfully. No issues were detected.

print report in [62]th open_state
The analysis was completed successfully. No issues were detected.

print report in [63]th open_state
The analysis was completed successfully. No issues were detected.

print report in [64]th open_state
The analysis was completed successfully. No issues were detected.

print report in [65]th open_state
The analysis was completed successfully. No issues were detected.

print report in [66]th open_state
The analysis was completed successfully. No issues were detected.

print report in [67]th open_state
The analysis was completed successfully. No issues were detected.

print report in [68]th open_state
The analysis was completed successfully. No issues were detected.

print report in [69]th open_state
The analysis was completed successfully. No issues were detected.

print report in [70]th open_state
The analysis was completed successfully. No issues were detected.

print report in [71]th open_state
The analysis was completed successfully. No issues were detected.

print report in [72]th open_state
The analysis was completed successfully. No issues were detected.

print report in [73]th open_state
The analysis was completed successfully. No issues were detected.

print report in [74]th open_state
The analysis was completed successfully. No issues were detected.

print report in [75]th open_state
The analysis was completed successfully. No issues were detected.

print report in [76]th open_state
The analysis was completed successfully. No issues were detected.

print report in [77]th open_state
The analysis was completed successfully. No issues were detected.

print report in [78]th open_state
The analysis was completed successfully. No issues were detected.

print report in [79]th open_state
The analysis was completed successfully. No issues were detected.

print report in [80]th open_state
The analysis was completed successfully. No issues were detected.

print report in [81]th open_state
The analysis was completed successfully. No issues were detected.

print report in [82]th open_state
The analysis was completed successfully. No issues were detected.

print report in [83]th open_state
The analysis was completed successfully. No issues were detected.

print report in [84]th open_state
The analysis was completed successfully. No issues were detected.

print report in [85]th open_state
The analysis was completed successfully. No issues were detected.

print report in [86]th open_state
The analysis was completed successfully. No issues were detected.

print report in [87]th open_state
The analysis was completed successfully. No issues were detected.

print report in [88]th open_state
The analysis was completed successfully. No issues were detected.

print report in [89]th open_state
The analysis was completed successfully. No issues were detected.

print report in [90]th open_state
The analysis was completed successfully. No issues were detected.

print report in [91]th open_state
The analysis was completed successfully. No issues were detected.

print report in [92]th open_state
The analysis was completed successfully. No issues were detected.

print report in [93]th open_state
The analysis was completed successfully. No issues were detected.

print report in [94]th open_state
The analysis was completed successfully. No issues were detected.

print report in [95]th open_state
The analysis was completed successfully. No issues were detected.

print report in [96]th open_state
The analysis was completed successfully. No issues were detected.

print report in [97]th open_state
The analysis was completed successfully. No issues were detected.

print report in [98]th open_state
The analysis was completed successfully. No issues were detected.

print report in [99]th open_state
The analysis was completed successfully. No issues were detected.

print report in [100]th open_state
The analysis was completed successfully. No issues were detected.

print report in [101]th open_state
The analysis was completed successfully. No issues were detected.

print report in [102]th open_state
The analysis was completed successfully. No issues were detected.

print report in [103]th open_state
The analysis was completed successfully. No issues were detected.

print report in [104]th open_state
The analysis was completed successfully. No issues were detected.

print report in [105]th open_state
The analysis was completed successfully. No issues were detected.

print report in [106]th open_state
The analysis was completed successfully. No issues were detected.

print report in [107]th open_state
The analysis was completed successfully. No issues were detected.

print report in [108]th open_state
The analysis was completed successfully. No issues were detected.

print report in [109]th open_state
The analysis was completed successfully. No issues were detected.

print report in [110]th open_state
The analysis was completed successfully. No issues were detected.

print report in [111]th open_state
The analysis was completed successfully. No issues were detected.

print report in [112]th open_state
The analysis was completed successfully. No issues were detected.

print report in [113]th open_state
The analysis was completed successfully. No issues were detected.

print report in [114]th open_state
The analysis was completed successfully. No issues were detected.

print report in [115]th open_state
The analysis was completed successfully. No issues were detected.

print report in [116]th open_state
The analysis was completed successfully. No issues were detected.

print report in [117]th open_state
The analysis was completed successfully. No issues were detected.

print report in [118]th open_state
The analysis was completed successfully. No issues were detected.

print report in [119]th open_state
The analysis was completed successfully. No issues were detected.

print report in [120]th open_state
The analysis was completed successfully. No issues were detected.

print report in [121]th open_state
The analysis was completed successfully. No issues were detected.

print report in [122]th open_state
The analysis was completed successfully. No issues were detected.

print report in [123]th open_state
The analysis was completed successfully. No issues were detected.

print report in [124]th open_state
The analysis was completed successfully. No issues were detected.

print report in [125]th open_state
The analysis was completed successfully. No issues were detected.

print report in [126]th open_state
The analysis was completed successfully. No issues were detected.

print report in [127]th open_state
The analysis was completed successfully. No issues were detected.

print report in [128]th open_state
The analysis was completed successfully. No issues were detected.

print report in [129]th open_state
The analysis was completed successfully. No issues were detected.

print report in [130]th open_state
The analysis was completed successfully. No issues were detected.

print report in [131]th open_state
The analysis was completed successfully. No issues were detected.

print report in [132]th open_state
The analysis was completed successfully. No issues were detected.

print report in [133]th open_state
The analysis was completed successfully. No issues were detected.

print report in [134]th open_state
The analysis was completed successfully. No issues were detected.

print report in [135]th open_state
The analysis was completed successfully. No issues were detected.

print report in [136]th open_state
The analysis was completed successfully. No issues were detected.

print report in [137]th open_state
The analysis was completed successfully. No issues were detected.

print report in [138]th open_state
The analysis was completed successfully. No issues were detected.

print report in [139]th open_state
The analysis was completed successfully. No issues were detected.

print report in [140]th open_state
The analysis was completed successfully. No issues were detected.

print report in [141]th open_state
The analysis was completed successfully. No issues were detected.

print report in [142]th open_state
The analysis was completed successfully. No issues were detected.

print report in [143]th open_state
The analysis was completed successfully. No issues were detected.

print report in [144]th open_state
The analysis was completed successfully. No issues were detected.

print report in [145]th open_state
The analysis was completed successfully. No issues were detected.

print report in [146]th open_state
The analysis was completed successfully. No issues were detected.

print report in [147]th open_state
The analysis was completed successfully. No issues were detected.

print report in [148]th open_state
The analysis was completed successfully. No issues were detected.

print report in [149]th open_state
The analysis was completed successfully. No issues were detected.

print report in [150]th open_state
The analysis was completed successfully. No issues were detected.

print report in [151]th open_state
The analysis was completed successfully. No issues were detected.

print report in [152]th open_state
The analysis was completed successfully. No issues were detected.

print report in [153]th open_state
The analysis was completed successfully. No issues were detected.

print report in [154]th open_state
The analysis was completed successfully. No issues were detected.

print report in [155]th open_state
The analysis was completed successfully. No issues were detected.

print report in [156]th open_state
The analysis was completed successfully. No issues were detected.

print report in [157]th open_state
The analysis was completed successfully. No issues were detected.

print report in [158]th open_state
The analysis was completed successfully. No issues were detected.

print report in [159]th open_state
The analysis was completed successfully. No issues were detected.

print report in [160]th open_state
The analysis was completed successfully. No issues were detected.

print report in [161]th open_state
The analysis was completed successfully. No issues were detected.

print report in [162]th open_state
The analysis was completed successfully. No issues were detected.

print report in [163]th open_state
The analysis was completed successfully. No issues were detected.

print report in [164]th open_state
The analysis was completed successfully. No issues were detected.

print report in [165]th open_state
The analysis was completed successfully. No issues were detected.

print report in [166]th open_state
The analysis was completed successfully. No issues were detected.

print report in [167]th open_state
The analysis was completed successfully. No issues were detected.

print report in [168]th open_state
The analysis was completed successfully. No issues were detected.

print report in [169]th open_state
The analysis was completed successfully. No issues were detected.

print report in [170]th open_state
The analysis was completed successfully. No issues were detected.

print report in [171]th open_state
The analysis was completed successfully. No issues were detected.

print report in [172]th open_state
The analysis was completed successfully. No issues were detected.

print report in [173]th open_state
The analysis was completed successfully. No issues were detected.

print report in [174]th open_state
The analysis was completed successfully. No issues were detected.

print report in [175]th open_state
The analysis was completed successfully. No issues were detected.

print report in [176]th open_state
The analysis was completed successfully. No issues were detected.

print report in [177]th open_state
The analysis was completed successfully. No issues were detected.

print report in [178]th open_state
The analysis was completed successfully. No issues were detected.

print report in [179]th open_state
The analysis was completed successfully. No issues were detected.

print report in [180]th open_state
The analysis was completed successfully. No issues were detected.

print report in [181]th open_state
The analysis was completed successfully. No issues were detected.

print report in [182]th open_state
The analysis was completed successfully. No issues were detected.

print report in [183]th open_state
The analysis was completed successfully. No issues were detected.

print report in [184]th open_state
The analysis was completed successfully. No issues were detected.

print report in [185]th open_state
The analysis was completed successfully. No issues were detected.

print report in [186]th open_state
The analysis was completed successfully. No issues were detected.

print report in [187]th open_state
The analysis was completed successfully. No issues were detected.

print report in [188]th open_state
The analysis was completed successfully. No issues were detected.

print report in [189]th open_state
The analysis was completed successfully. No issues were detected.

print report in [190]th open_state
The analysis was completed successfully. No issues were detected.

print report in [191]th open_state
The analysis was completed successfully. No issues were detected.

print report in [192]th open_state
The analysis was completed successfully. No issues were detected.

print report in [193]th open_state
The analysis was completed successfully. No issues were detected.

print report in [194]th open_state
The analysis was completed successfully. No issues were detected.

print report in [195]th open_state
The analysis was completed successfully. No issues were detected.

print report in [196]th open_state
The analysis was completed successfully. No issues were detected.

print report in [197]th open_state
The analysis was completed successfully. No issues were detected.

print report in [198]th open_state
The analysis was completed successfully. No issues were detected.

print report in [199]th open_state
The analysis was completed successfully. No issues were detected.

print report in [200]th open_state
The analysis was completed successfully. No issues were detected.

print report in [201]th open_state
The analysis was completed successfully. No issues were detected.

print report in [202]th open_state
The analysis was completed successfully. No issues were detected.

print report in [203]th open_state
The analysis was completed successfully. No issues were detected.

print report in [204]th open_state
The analysis was completed successfully. No issues were detected.

print report in [205]th open_state
The analysis was completed successfully. No issues were detected.

print report in [206]th open_state
The analysis was completed successfully. No issues were detected.

print report in [207]th open_state
The analysis was completed successfully. No issues were detected.

print report in [208]th open_state
The analysis was completed successfully. No issues were detected.

print report in [209]th open_state
The analysis was completed successfully. No issues were detected.

print report in [210]th open_state
The analysis was completed successfully. No issues were detected.

print report in [211]th open_state
The analysis was completed successfully. No issues were detected.

time cost [13522s]
全都消失了的原因是 有 possible的 那些 openstate 都在 执行的过程中 终止了 结束了。。。