main:  (96, 96, 96, 64, 82, 54, 21, 97, 2, 44, 87, 96, 0, 53, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 4, 128, 99, 1, 60, 240, 139, 20, 97, 2, 219, 87, 128, 99, 9, 94, 167, 179, 20, 97, 4, 2, 87, 128, 99, 12, 59, 123, 150, 20, 97, 4, 55, 87, 128, 99, 14, 112, 130, 3, 20, 97, 4, 90, 87, 128, 99, 20, 154, 207, 154, 20, 97, 4, 147, 87, 128, 99, 24, 22, 13, 221, 20, 97, 4, 204, 87, 128, 99, 31, 45, 197, 239, 20, 97, 4, 239, 87, 128, 99, 33, 181, 184, 221, 20, 97, 5, 18, 87, 128, 99, 35, 126, 148, 146, 20, 97, 5, 75, 87, 128, 99, 35, 184, 114, 221, 20, 97, 5, 190, 87, 128, 99, 38, 50, 191, 32, 20, 97, 5, 252, 87, 128, 99, 52, 20, 88, 8, 20, 97, 6, 31, 87, 128, 99, 57, 209, 249, 8, 20, 97, 6, 66, 87, 128, 99, 75, 103, 83, 188, 20, 97, 6, 101, 87, 128, 99, 77, 246, 214, 204, 20, 97, 6, 136, 87, 128, 99, 78, 16, 195, 238, 20, 97, 6, 180, 87, 128, 99, 89, 14, 26, 227, 20, 97, 6, 233, 87, 128, 99, 97, 46, 69, 163, 20, 97, 6, 248, 87, 128, 99, 100, 63, 124, 221, 20, 97, 7, 205, 87, 128, 99, 103, 78, 208, 102, 20, 97, 7, 249, 87, 128, 99, 104, 55, 255, 30, 20, 97, 8, 28, 87, 128, 99, 112, 160, 130, 49, 20, 97, 8, 52, 87, 128, 99, 116, 159, 152, 137, 20, 97, 8, 96, 87, 128, 99, 120, 82, 75, 46, 20, 97, 8, 149, 87, 128, 99, 129, 240, 63, 203, 20, 97, 8, 184, 87, 128, 99, 130, 102, 29, 196, 20, 97, 8, 228, 87, 128, 99, 130, 191, 100, 100, 20, 97, 9, 25, 87, 128, 99, 139, 21, 166, 5, 20, 97, 9, 82, 87, 128, 99, 141, 122, 244, 115, 20, 97, 9, 117, 87, 128, 99, 150, 215, 243, 245, 20, 97, 9, 152, 87, 128, 99, 161, 218, 47, 185, 20, 97, 9, 187, 87, 128, 99, 163, 145, 46, 200, 20, 97, 9, 231, 87, 128, 99, 169, 5, 156, 187, 20, 97, 10, 10, 87, 128, 99, 183, 188, 44, 132, 20, 97, 10, 63, 87, 128, 99, 186, 172, 83, 0, 20, 97, 10, 98, 87, 128, 99, 190, 124, 41, 193, 20, 97, 10, 142, 87, 128, 99, 201, 210, 122, 254, 20, 97, 10, 208, 87, 128, 99, 204, 154, 227, 246, 20, 97, 11, 5, 87, 128, 99, 205, 239, 145, 208, 20, 97, 11, 40, 87, 128, 99, 219, 222, 25, 136, 20, 97, 11, 84, 87, 128, 99, 221, 98, 237, 62, 20, 97, 11, 146, 87, 128, 99, 227, 55, 52, 253, 20, 97, 11, 199, 87, 128, 99, 229, 150, 33, 149, 20, 97, 11, 223, 87, 128, 99, 230, 111, 83, 183, 20, 97, 12, 11, 87, 128, 99, 236, 235, 41, 69, 20, 97, 12, 68, 87, 128, 99, 248, 200, 13, 38, 20, 97, 12, 201, 87, 97, 2, 44, 86, 91, 97, 2, 197, 91, 96, 0, 98, 52, 188, 0, 96, 15, 96, 0, 80, 84, 1, 66, 16, 128, 21, 97, 2, 153, 87, 80, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 91, 21, 97, 2, 178, 87, 97, 2, 167, 51, 97, 46, 61, 86, 91, 144, 80, 97, 2, 194, 86, 97, 2, 193, 86, 91, 97, 2, 186, 97, 55, 59, 86, 91, 144, 80, 97, 2, 194, 86, 91, 91, 144, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 2, 241, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 53, 3, 86, 91, 96, 64, 81, 128, 141, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 140, 129, 82, 96, 32, 1, 128, 96, 32, 1, 139, 129, 82, 96, 32, 1, 138, 129, 82, 96, 32, 1, 137, 129, 82, 96, 32, 1, 136, 129, 82, 96, 32, 1, 135, 129, 82, 96, 32, 1, 134, 129, 82, 96, 32, 1, 133, 129, 82, 96, 32, 1, 132, 129, 82, 96, 32, 1, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 130, 129, 3, 130, 82, 140, 129, 129, 84, 96, 1, 129, 96, 1, 22, 21, 97, 1, 0, 2, 3, 22, 96, 2, 144, 4, 129, 82, 96, 32, 1, 145, 80, 128, 84, 96, 1, 129, 96, 1, 22, 21, 97, 1, 0, 2, 3, 22, 96, 2, 144, 4, 128, 21, 97, 3, 232, 87, 128, 96, 31, 16, 97, 3, 189, 87, 97, 1, 0, 128, 131, 84, 4, 2, 131, 82, 145, 96, 32, 1, 145, 97, 3, 232, 86, 91, 130, 1, 145, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 91, 129, 84, 129, 82, 144, 96, 1, 1, 144, 96, 32, 1, 128, 131, 17, 97, 3, 203, 87, 130, 144, 3, 96, 31, 22, 130, 1, 145, 91, 80, 80, 157, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 4, 33, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 63, 86, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 4, 68, 96, 4, 128, 80, 80, 97, 64, 156, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 4, 103, 96, 4, 128, 80, 80, 97, 54, 111, 86, 91, 96, 64, 81, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 4, 160, 96, 4, 128, 80, 80, 97, 55, 21, 86, 91, 96, 64, 81, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 4, 217, 96, 4, 128, 80, 80, 97, 63, 15, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 4, 252, 96, 4, 128, 80, 80, 97, 52, 162, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 5, 31, 96, 4, 128, 80, 80, 97, 64, 222, 86, 91, 96, 64, 81, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 5, 168, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 130, 1, 128, 53, 144, 96, 32, 1, 145, 145, 144, 128, 128, 96, 31, 1, 96, 32, 128, 145, 4, 2, 96, 32, 1, 96, 64, 81, 144, 129, 1, 96, 64, 82, 128, 147, 146, 145, 144, 129, 129, 82, 96, 32, 1, 131, 131, 128, 130, 132, 55, 130, 1, 145, 80, 80, 80, 80, 80, 80, 144, 144, 145, 144, 80, 80, 97, 16, 103, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 5, 230, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 42, 105, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 6, 9, 96, 4, 128, 80, 80, 97, 46, 40, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 6, 44, 96, 4, 128, 80, 80, 97, 54, 102, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 6, 79, 96, 4, 128, 80, 80, 97, 44, 183, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 6, 114, 96, 4, 128, 80, 80, 97, 64, 147, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 6, 158, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 54, 38, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 6, 211, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 42, 61, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 6, 246, 96, 4, 128, 80, 80, 97, 48, 203, 86, 91, 0, 91, 97, 7, 183, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 130, 1, 128, 53, 144, 96, 32, 1, 145, 145, 144, 128, 128, 96, 31, 1, 96, 32, 128, 145, 4, 2, 96, 32, 1, 96, 64, 81, 144, 129, 1, 96, 64, 82, 128, 147, 146, 145, 144, 129, 129, 82, 96, 32, 1, 131, 131, 128, 130, 132, 55, 130, 1, 145, 80, 80, 80, 80, 80, 80, 144, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 130, 1, 128, 53, 144, 96, 32, 1, 145, 145, 144, 128, 128, 96, 31, 1, 96, 32, 128, 145, 4, 2, 96, 32, 1, 96, 64, 81, 144, 129, 1, 96, 64, 82, 128, 147, 146, 145, 144, 129, 129, 82, 96, 32, 1, 131, 131, 128, 130, 132, 55, 130, 1, 145, 80, 80, 80, 80, 80, 80, 144, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 55, 255, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 7, 227, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 54, 187, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 8, 6, 96, 4, 128, 80, 80, 97, 53, 238, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 8, 50, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 35, 65, 86, 91, 0, 91, 97, 8, 74, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 63, 24, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 8, 127, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 43, 172, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 8, 162, 96, 4, 128, 80, 80, 97, 44, 226, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 8, 206, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 54, 214, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 9, 3, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 25, 205, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 9, 38, 96, 4, 128, 80, 80, 97, 54, 149, 86, 91, 96, 64, 81, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 9, 95, 96, 4, 128, 80, 80, 97, 55, 12, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 9, 130, 96, 4, 128, 80, 80, 97, 45, 154, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 9, 165, 96, 4, 128, 80, 80, 97, 53, 247, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 9, 209, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 37, 86, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 9, 244, 96, 4, 128, 80, 80, 97, 55, 59, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 10, 41, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 41, 198, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 10, 76, 96, 4, 128, 80, 80, 97, 64, 165, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 10, 120, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 46, 61, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 10, 164, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 45, 178, 86, 91, 96, 64, 81, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 10, 239, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 13, 2, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 11, 18, 96, 4, 128, 80, 80, 97, 41, 163, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 11, 62, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 54, 75, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 11, 124, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 42, 226, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 11, 177, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 64, 42, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 11, 221, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 43, 17, 86, 91, 0, 91, 97, 11, 245, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 80, 80, 97, 54, 241, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 12, 24, 96, 4, 128, 80, 80, 97, 54, 0, 86, 91, 96, 64, 81, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 12, 179, 96, 4, 128, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 145, 144, 128, 53, 144, 96, 32, 1, 144, 130, 1, 128, 53, 144, 96, 32, 1, 145, 145, 144, 128, 128, 96, 31, 1, 96, 32, 128, 145, 4, 2, 96, 32, 1, 96, 64, 81, 144, 129, 1, 96, 64, 82, 128, 147, 146, 145, 144, 129, 129, 82, 96, 32, 1, 131, 131, 128, 130, 132, 55, 130, 1, 145, 80, 80, 80, 80, 80, 80, 144, 144, 145, 144, 80, 80, 97, 55, 73, 86, 91, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 97, 12, 214, 96, 4, 128, 80, 80, 97, 64, 184, 86, 91, 96, 64, 81, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 243, 91, 96, 0, 96, 0, 96, 0, 97, 13, 17, 51, 97, 63, 24, 86, 91, 20, 21, 97, 13, 28, 87, 97, 0, 2, 86, 91, 96, 0, 52, 17, 21, 97, 13, 42, 87, 97, 0, 2, 86, 91, 96, 0, 96, 0, 80, 132, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 144, 80, 128, 96, 11, 1, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 128, 97, 13, 204, 87, 80, 128, 96, 12, 1, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 91, 128, 97, 13, 222, 87, 80, 128, 96, 3, 1, 96, 0, 80, 84, 66, 16, 21, 91, 21, 97, 13, 232, 87, 97, 0, 2, 86, 91, 130, 21, 97, 14, 123, 87, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 129, 96, 9, 1, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 96, 1, 129, 96, 11, 1, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 97, 15, 4, 86, 91, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 129, 96, 10, 1, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 96, 1, 129, 96, 12, 1, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 91, 96, 0, 96, 11, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 20, 21, 97, 15, 117, 87, 131, 96, 11, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 97, 16, 16, 86, 91, 96, 0, 96, 0, 80, 96, 11, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 80, 84, 129, 96, 3, 1, 96, 0, 80, 84, 17, 21, 97, 16, 15, 87, 131, 96, 11, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 91, 91, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 127, 134, 171, 252, 233, 155, 125, 217, 8, 190, 192, 22, 146, 136, 121, 127, 133, 4, 158, 199, 60, 190, 4, 110, 217, 222, 129, 143, 171, 58, 73, 122, 224, 133, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 163, 91, 80, 146, 145, 80, 80, 86, 91, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 52, 17, 21, 97, 16, 127, 87, 97, 0, 2, 86, 91, 96, 0, 96, 0, 80, 135, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 147, 80, 131, 96, 7, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 97, 16, 193, 87, 98, 13, 47, 0, 97, 16, 198, 86, 91, 98, 35, 152, 128, 91, 146, 80, 131, 96, 4, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 128, 21, 97, 16, 238, 87, 80, 130, 132, 96, 3, 1, 96, 0, 80, 84, 1, 66, 17, 91, 21, 97, 17, 1, 87, 97, 16, 252, 135, 97, 65, 4, 86, 91, 97, 25, 195, 86, 91, 131, 96, 3, 1, 96, 0, 80, 84, 66, 16, 128, 97, 17, 37, 87, 80, 131, 96, 4, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 91, 128, 97, 17, 201, 87, 80, 131, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 1, 1, 96, 0, 80, 84, 135, 96, 64, 81, 128, 132, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 20, 1, 131, 129, 82, 96, 32, 1, 130, 128, 81, 144, 96, 32, 1, 144, 128, 131, 131, 130, 144, 96, 0, 96, 4, 96, 32, 132, 96, 31, 1, 4, 96, 15, 2, 96, 3, 1, 241, 80, 144, 80, 1, 147, 80, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 32, 132, 96, 5, 1, 96, 0, 80, 84, 20, 21, 91, 21, 97, 17, 211, 87, 97, 0, 2, 86, 91, 97, 18, 0, 132, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 97, 69, 70, 86, 91, 21, 21, 97, 18, 114, 87, 97, 18, 15, 135, 97, 65, 4, 86, 91, 131, 96, 13, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 96, 0, 133, 96, 6, 1, 96, 0, 80, 84, 96, 64, 81, 128, 144, 80, 96, 0, 96, 64, 81, 128, 131, 3, 129, 133, 136, 136, 241, 147, 80, 80, 80, 80, 80, 97, 25, 195, 86, 91, 96, 1, 145, 80, 97, 18, 126, 97, 44, 183, 86, 91, 132, 96, 1, 1, 96, 0, 80, 84, 17, 21, 97, 18, 147, 87, 96, 0, 145, 80, 129, 80, 91, 131, 96, 10, 1, 96, 0, 80, 84, 132, 96, 9, 1, 96, 0, 80, 84, 1, 144, 80, 96, 4, 134, 81, 16, 21, 128, 21, 97, 19, 48, 87, 80, 96, 104, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 134, 96, 0, 129, 81, 129, 16, 21, 97, 0, 2, 87, 144, 96, 32, 1, 1, 81, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 4, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 91, 128, 21, 97, 19, 180, 87, 80, 96, 55, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 134, 96, 1, 129, 81, 129, 16, 21, 97, 0, 2, 87, 144, 96, 32, 1, 1, 81, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 4, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 91, 128, 21, 97, 20, 56, 87, 80, 96, 255, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 134, 96, 2, 129, 81, 129, 16, 21, 97, 0, 2, 87, 144, 96, 32, 1, 1, 81, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 4, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 91, 128, 21, 97, 20, 188, 87, 80, 96, 30, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 134, 96, 3, 129, 81, 129, 16, 21, 97, 0, 2, 87, 144, 96, 32, 1, 1, 81, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 4, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 91, 128, 21, 97, 21, 7, 87, 80, 97, 21, 4, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 97, 20, 254, 97, 44, 183, 86, 91, 1, 97, 70, 151, 86, 91, 129, 16, 91, 21, 97, 21, 19, 87, 96, 0, 145, 80, 129, 80, 91, 97, 21, 35, 132, 96, 1, 1, 96, 0, 80, 84, 97, 70, 151, 86, 91, 129, 16, 21, 21, 97, 21, 186, 87, 131, 96, 13, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 96, 0, 133, 96, 6, 1, 96, 0, 80, 84, 96, 64, 81, 128, 144, 80, 96, 0, 96, 64, 81, 128, 131, 3, 129, 133, 136, 136, 241, 147, 80, 80, 80, 80, 21, 21, 97, 21, 147, 87, 97, 0, 2, 86, 91, 66, 96, 2, 96, 0, 80, 129, 144, 85, 80, 96, 5, 96, 22, 96, 0, 80, 84, 4, 129, 17, 21, 97, 21, 185, 87, 96, 5, 96, 1, 96, 0, 80, 129, 144, 85, 80, 91, 91, 97, 21, 202, 132, 96, 1, 1, 96, 0, 80, 84, 97, 70, 151, 86, 91, 129, 16, 21, 128, 21, 97, 21, 230, 87, 80, 131, 96, 10, 1, 96, 0, 80, 84, 132, 96, 9, 1, 96, 0, 80, 84, 17, 91, 128, 21, 97, 21, 239, 87, 80, 129, 91, 21, 97, 25, 121, 87, 131, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 1, 1, 96, 0, 80, 84, 135, 96, 64, 81, 128, 130, 128, 81, 144, 96, 32, 1, 144, 128, 131, 131, 130, 144, 96, 0, 96, 4, 96, 32, 132, 96, 31, 1, 4, 96, 15, 2, 96, 3, 1, 241, 80, 144, 80, 144, 129, 1, 144, 96, 31, 22, 128, 21, 97, 22, 133, 87, 128, 130, 3, 128, 81, 96, 1, 131, 96, 32, 3, 97, 1, 0, 10, 3, 25, 22, 129, 82, 96, 32, 1, 145, 80, 91, 80, 145, 80, 80, 96, 0, 96, 64, 81, 128, 131, 3, 129, 133, 135, 97, 133, 2, 90, 3, 241, 146, 80, 80, 80, 21, 21, 97, 22, 169, 87, 97, 0, 2, 86, 91, 96, 1, 132, 96, 4, 1, 96, 1, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 96, 1, 148, 80, 132, 80, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 128, 21, 97, 23, 156, 87, 80, 96, 7, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 91, 128, 21, 97, 24, 26, 87, 80, 96, 8, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 91, 128, 21, 97, 24, 152, 87, 80, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 91, 128, 21, 97, 25, 22, 87, 80, 96, 3, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 91, 21, 97, 25, 120, 87, 131, 96, 1, 1, 96, 0, 80, 84, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 131, 96, 1, 1, 96, 0, 80, 84, 96, 6, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 91, 91, 97, 25, 130, 135, 97, 65, 4, 86, 91, 134, 127, 223, 199, 139, 220, 168, 227, 224, 177, 140, 22, 197, 201, 147, 35, 198, 203, 158, 181, 224, 10, 253, 225, 144, 180, 231, 39, 63, 81, 88, 112, 43, 7, 134, 131, 96, 64, 81, 128, 131, 129, 82, 96, 32, 1, 130, 129, 82, 96, 32, 1, 146, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 162, 91, 80, 80, 80, 80, 146, 145, 80, 80, 86, 91, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 52, 17, 21, 97, 25, 229, 87, 97, 0, 2, 86, 91, 96, 0, 97, 25, 240, 51, 97, 63, 24, 86, 91, 20, 21, 97, 25, 251, 87, 97, 0, 2, 86, 91, 96, 0, 96, 0, 80, 135, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 147, 80, 131, 96, 3, 1, 96, 0, 80, 84, 66, 16, 128, 97, 26, 62, 87, 80, 98, 35, 152, 128, 132, 96, 3, 1, 96, 0, 80, 84, 1, 66, 17, 91, 128, 97, 26, 153, 87, 80, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 91, 128, 97, 26, 179, 87, 80, 131, 96, 7, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 91, 128, 97, 26, 247, 87, 80, 131, 96, 11, 1, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 91, 128, 97, 27, 109, 87, 80, 134, 96, 11, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 20, 21, 128, 21, 97, 27, 108, 87, 80, 96, 0, 96, 11, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 20, 21, 91, 91, 21, 97, 27, 119, 87, 97, 0, 2, 86, 91, 96, 0, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 97, 29, 173, 87, 97, 27, 230, 134, 97, 70, 248, 86, 91, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 97, 1, 0, 10, 129, 84, 129, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 96, 0, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 97, 28, 160, 87, 97, 0, 2, 86, 91, 96, 13, 96, 0, 80, 84, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 49, 16, 21, 97, 28, 201, 87, 97, 0, 2, 86, 91, 97, 28, 209, 97, 44, 183, 86, 91, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 0, 1, 96, 0, 80, 129, 144, 85, 80, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 2, 1, 96, 0, 80, 129, 144, 85, 80, 96, 22, 96, 0, 80, 84, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 1, 1, 96, 0, 80, 129, 144, 85, 80, 96, 1, 132, 96, 4, 1, 96, 1, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 91, 131, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 1, 1, 96, 0, 80, 84, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 0, 1, 96, 0, 80, 84, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 2, 4, 146, 80, 96, 0, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 186, 172, 83, 0, 133, 51, 96, 64, 81, 131, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 145, 80, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 133, 136, 97, 133, 2, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 20, 21, 97, 31, 21, 87, 97, 0, 2, 86, 91, 131, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 1, 1, 96, 0, 80, 84, 132, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 2, 1, 96, 0, 80, 84, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 2, 4, 145, 80, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 130, 96, 9, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 2, 4, 144, 80, 129, 96, 5, 96, 0, 80, 96, 0, 134, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 129, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 16, 21, 97, 32, 195, 87, 97, 0, 2, 86, 91, 129, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 128, 96, 9, 96, 0, 80, 96, 0, 134, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 128, 96, 9, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 16, 21, 97, 33, 190, 87, 97, 0, 2, 86, 91, 128, 96, 9, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 163, 97, 34, 130, 51, 97, 65, 122, 86, 91, 80, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 22, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 96, 0, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 96, 0, 96, 10, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 96, 1, 148, 80, 97, 35, 55, 86, 91, 80, 80, 80, 80, 146, 145, 80, 80, 86, 91, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 128, 97, 35, 179, 87, 80, 96, 4, 96, 0, 80, 96, 0, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 91, 21, 97, 35, 189, 87, 97, 37, 83, 86, 91, 128, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 49, 96, 64, 81, 128, 144, 80, 96, 0, 96, 64, 81, 128, 131, 3, 129, 133, 135, 97, 133, 2, 90, 3, 241, 146, 80, 80, 80, 21, 21, 97, 36, 18, 87, 97, 0, 2, 86, 91, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 5, 96, 0, 80, 96, 0, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 96, 0, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 96, 9, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 9, 96, 0, 80, 96, 0, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 96, 0, 96, 9, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 91, 80, 86, 91, 96, 0, 96, 0, 96, 0, 96, 0, 52, 17, 21, 97, 37, 106, 87, 97, 0, 2, 86, 91, 51, 145, 80, 96, 9, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 6, 96, 0, 80, 84, 96, 8, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 210, 204, 113, 143, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 96, 5, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 2, 4, 16, 21, 97, 38, 109, 87, 97, 0, 2, 86, 91, 96, 9, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 6, 96, 0, 80, 84, 96, 8, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 210, 204, 113, 143, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 96, 5, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 2, 4, 3, 144, 80, 131, 21, 97, 40, 152, 87, 96, 8, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 2, 33, 3, 138, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 14, 112, 130, 3, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 131, 96, 64, 81, 131, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 130, 129, 82, 96, 32, 1, 146, 80, 80, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 21, 21, 97, 40, 147, 87, 97, 0, 2, 86, 91, 97, 41, 87, 86, 91, 96, 8, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 2, 33, 3, 138, 131, 131, 96, 64, 81, 131, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 130, 129, 82, 96, 32, 1, 146, 80, 80, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 21, 21, 97, 41, 86, 87, 97, 0, 2, 86, 91, 91, 128, 96, 9, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 96, 1, 146, 80, 97, 41, 156, 86, 91, 80, 80, 145, 144, 80, 86, 91, 96, 0, 96, 0, 52, 17, 21, 97, 41, 179, 87, 97, 0, 2, 86, 91, 97, 41, 188, 51, 97, 65, 122, 86, 91, 144, 80, 97, 41, 195, 86, 91, 144, 86, 91, 96, 0, 96, 17, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 128, 21, 97, 41, 232, 87, 80, 96, 15, 96, 0, 80, 84, 66, 17, 91, 128, 21, 97, 41, 250, 87, 80, 97, 41, 248, 51, 97, 72, 22, 86, 91, 21, 91, 128, 21, 97, 42, 13, 87, 80, 97, 42, 12, 51, 132, 132, 97, 68, 63, 86, 91, 91, 128, 21, 97, 42, 31, 87, 80, 97, 42, 30, 131, 131, 97, 73, 14, 86, 91, 91, 21, 97, 42, 49, 87, 96, 1, 144, 80, 97, 42, 55, 86, 97, 42, 54, 86, 91, 97, 0, 2, 86, 91, 91, 146, 145, 80, 80, 86, 91, 96, 0, 97, 42, 71, 97, 41, 163, 86, 91, 21, 21, 97, 42, 82, 87, 97, 0, 2, 86, 91, 97, 42, 92, 131, 131, 97, 41, 198, 86, 91, 144, 80, 97, 42, 99, 86, 91, 146, 145, 80, 80, 86, 91, 96, 0, 96, 17, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 128, 21, 97, 42, 139, 87, 80, 96, 15, 96, 0, 80, 84, 66, 17, 91, 128, 21, 97, 42, 157, 87, 80, 97, 42, 155, 132, 97, 72, 22, 86, 91, 21, 91, 128, 21, 97, 42, 176, 87, 80, 97, 42, 175, 132, 132, 132, 97, 68, 63, 86, 91, 91, 128, 21, 97, 42, 195, 87, 80, 97, 42, 194, 132, 132, 132, 97, 74, 92, 86, 91, 91, 21, 97, 42, 213, 87, 96, 1, 144, 80, 97, 42, 219, 86, 97, 42, 218, 86, 91, 97, 0, 2, 86, 91, 91, 147, 146, 80, 80, 80, 86, 91, 96, 0, 97, 42, 237, 132, 97, 65, 122, 86, 91, 21, 21, 97, 42, 248, 87, 97, 0, 2, 86, 91, 97, 43, 3, 132, 132, 132, 97, 42, 105, 86, 91, 144, 80, 97, 43, 10, 86, 91, 147, 146, 80, 80, 80, 86, 91, 96, 0, 52, 17, 21, 97, 43, 31, 87, 97, 0, 2, 86, 91, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 128, 97, 43, 148, 87, 80, 96, 100, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 97, 43, 143, 97, 44, 183, 86, 91, 1, 4, 129, 17, 91, 21, 97, 43, 158, 87, 97, 0, 2, 86, 91, 128, 96, 12, 96, 0, 80, 129, 144, 85, 80, 91, 80, 86, 91, 96, 0, 96, 0, 52, 17, 21, 97, 43, 188, 87, 97, 0, 2, 86, 91, 96, 3, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 21, 97, 44, 24, 87, 97, 0, 2, 86, 91, 129, 96, 4, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 115, 173, 42, 21, 60, 139, 103, 153, 29, 249, 69, 144, 36, 149, 11, 49, 138, 96, 151, 130, 206, 232, 199, 238, 218, 71, 185, 5, 249, 186, 169, 31, 131, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 162, 96, 1, 144, 80, 97, 44, 177, 86, 91, 146, 145, 80, 80, 86, 91, 96, 0, 96, 13, 96, 0, 80, 84, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 49, 3, 144, 80, 97, 44, 223, 86, 91, 144, 86, 91, 96, 0, 98, 230, 182, 128, 66, 3, 96, 2, 96, 0, 80, 84, 16, 128, 97, 45, 73, 87, 80, 96, 3, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 91, 128, 21, 97, 45, 94, 87, 80, 98, 18, 117, 0, 66, 3, 96, 2, 96, 0, 80, 84, 16, 91, 21, 97, 45, 141, 87, 66, 96, 2, 96, 0, 80, 129, 144, 85, 80, 96, 2, 96, 1, 96, 0, 130, 130, 130, 80, 84, 2, 146, 80, 80, 129, 144, 85, 80, 96, 1, 144, 80, 97, 45, 151, 86, 97, 45, 150, 86, 91, 96, 0, 144, 80, 97, 45, 151, 86, 91, 91, 144, 86, 91, 96, 0, 96, 1, 96, 0, 96, 0, 80, 128, 84, 144, 80, 3, 144, 80, 97, 45, 175, 86, 91, 144, 86, 91, 96, 0, 96, 0, 96, 0, 80, 130, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 96, 8, 1, 96, 0, 80, 96, 0, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 4, 2, 1, 96, 0, 91, 80, 96, 3, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 144, 80, 97, 46, 35, 86, 91, 145, 144, 80, 86, 91, 96, 0, 97, 46, 51, 51, 97, 72, 22, 86, 91, 144, 80, 97, 46, 58, 86, 91, 144, 86, 91, 96, 0, 96, 0, 96, 15, 96, 0, 80, 84, 66, 16, 128, 21, 97, 46, 85, 87, 80, 96, 0, 52, 17, 91, 128, 21, 97, 46, 241, 87, 80, 96, 0, 96, 17, 96, 1, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 128, 97, 46, 240, 87, 80, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 96, 17, 96, 1, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 91, 91, 21, 97, 48, 192, 87, 97, 46, 254, 97, 52, 162, 86, 91, 96, 20, 52, 2, 4, 144, 80, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 52, 3, 96, 64, 81, 128, 144, 80, 96, 0, 96, 64, 81, 128, 131, 3, 129, 133, 135, 97, 133, 2, 90, 3, 241, 146, 80, 80, 80, 80, 128, 96, 20, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 128, 96, 22, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 52, 96, 19, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 219, 204, 185, 38, 134, 239, 206, 175, 185, 187, 126, 3, 148, 223, 127, 88, 247, 27, 149, 64, 97, 184, 26, 251, 87, 16, 155, 242, 71, 211, 215, 90, 130, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 162, 96, 16, 96, 0, 80, 84, 96, 22, 96, 0, 80, 84, 16, 21, 128, 21, 97, 48, 92, 87, 80, 96, 17, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 91, 21, 97, 48, 183, 87, 96, 1, 96, 17, 96, 0, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 127, 243, 129, 163, 226, 66, 143, 221, 163, 102, 21, 145, 158, 141, 156, 53, 135, 141, 158, 176, 207, 133, 172, 110, 223, 87, 80, 136, 232, 14, 76, 20, 126, 96, 22, 96, 0, 80, 84, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 161, 91, 96, 1, 145, 80, 97, 48, 197, 86, 91, 97, 0, 2, 86, 91, 80, 145, 144, 80, 86, 91, 96, 0, 52, 17, 21, 97, 48, 217, 87, 97, 0, 2, 86, 91, 96, 15, 96, 0, 80, 84, 66, 17, 128, 21, 97, 48, 250, 87, 80, 96, 17, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 91, 21, 97, 52, 159, 87, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 210, 204, 113, 143, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 49, 16, 21, 21, 97, 51, 14, 87, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 2, 33, 3, 138, 48, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 210, 204, 113, 143, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 96, 64, 81, 131, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 130, 129, 82, 96, 32, 1, 146, 80, 80, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 80, 91, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 96, 19, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 64, 81, 128, 144, 80, 96, 0, 96, 64, 81, 128, 131, 3, 129, 133, 135, 97, 133, 2, 90, 3, 241, 146, 80, 80, 80, 21, 97, 52, 158, 87, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 187, 40, 53, 62, 69, 152, 195, 185, 25, 145, 1, 166, 110, 9, 137, 84, 155, 101, 154, 89, 165, 77, 44, 39, 251, 177, 131, 241, 147, 44, 142, 109, 96, 19, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 162, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 22, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 96, 0, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 96, 0, 96, 19, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 91, 91, 91, 86, 91, 96, 0, 66, 98, 18, 117, 0, 96, 15, 96, 0, 80, 84, 3, 17, 21, 97, 52, 195, 87, 96, 20, 144, 80, 97, 53, 0, 86, 97, 52, 255, 86, 91, 66, 98, 5, 70, 0, 96, 15, 96, 0, 80, 84, 3, 17, 21, 97, 52, 245, 87, 98, 1, 81, 128, 98, 18, 117, 0, 96, 15, 96, 0, 80, 84, 3, 66, 3, 4, 96, 20, 1, 144, 80, 97, 53, 0, 86, 97, 52, 254, 86, 91, 96, 30, 144, 80, 97, 53, 0, 86, 91, 91, 91, 144, 86, 91, 96, 0, 96, 0, 80, 129, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 145, 80, 144, 80, 128, 96, 0, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 144, 128, 96, 1, 1, 96, 0, 80, 84, 144, 128, 96, 2, 1, 96, 0, 80, 144, 128, 96, 3, 1, 96, 0, 80, 84, 144, 128, 96, 4, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 144, 128, 96, 4, 1, 96, 1, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 144, 128, 96, 5, 1, 96, 0, 80, 84, 144, 128, 96, 6, 1, 96, 0, 80, 84, 144, 128, 96, 7, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 144, 128, 96, 9, 1, 96, 0, 80, 84, 144, 128, 96, 10, 1, 96, 0, 80, 84, 144, 128, 96, 13, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 144, 80, 140, 86, 91, 96, 1, 96, 0, 80, 84, 129, 86, 91, 96, 2, 96, 0, 80, 84, 129, 86, 91, 96, 3, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 86, 91, 96, 4, 96, 0, 80, 96, 32, 82, 128, 96, 0, 82, 96, 64, 96, 0, 32, 96, 0, 145, 80, 144, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 129, 86, 91, 96, 5, 96, 0, 80, 96, 32, 82, 128, 96, 0, 82, 96, 64, 96, 0, 32, 96, 0, 145, 80, 144, 80, 84, 129, 86, 91, 96, 6, 96, 0, 80, 84, 129, 86, 91, 96, 7, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 86, 91, 96, 8, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 86, 91, 96, 9, 96, 0, 80, 96, 32, 82, 128, 96, 0, 82, 96, 64, 96, 0, 32, 96, 0, 145, 80, 144, 80, 84, 129, 86, 91, 96, 10, 96, 0, 80, 96, 32, 82, 128, 96, 0, 82, 96, 64, 96, 0, 32, 96, 0, 145, 80, 144, 80, 84, 129, 86, 91, 96, 11, 96, 0, 80, 96, 32, 82, 128, 96, 0, 82, 96, 64, 96, 0, 32, 96, 0, 145, 80, 144, 80, 84, 129, 86, 91, 96, 12, 96, 0, 80, 84, 129, 86, 91, 96, 14, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 86, 91, 96, 0, 96, 1, 144, 80, 97, 55, 70, 86, 91, 144, 86, 91, 96, 0, 96, 0, 96, 0, 52, 17, 21, 97, 55, 91, 87, 97, 0, 2, 86, 91, 96, 0, 96, 0, 80, 134, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 144, 80, 132, 132, 132, 96, 64, 81, 128, 132, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 20, 1, 131, 129, 82, 96, 32, 1, 130, 128, 81, 144, 96, 32, 1, 144, 128, 131, 131, 130, 144, 96, 0, 96, 4, 96, 32, 132, 96, 31, 1, 4, 96, 15, 2, 96, 3, 1, 241, 80, 144, 80, 1, 147, 80, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 32, 129, 96, 5, 1, 96, 0, 80, 84, 20, 145, 80, 97, 55, 246, 86, 91, 80, 148, 147, 80, 80, 80, 80, 86, 91, 96, 0, 96, 0, 96, 0, 97, 56, 14, 51, 97, 63, 24, 86, 91, 20, 21, 97, 56, 25, 87, 97, 0, 2, 86, 91, 130, 128, 21, 97, 56, 164, 87, 80, 96, 0, 135, 20, 21, 128, 97, 56, 51, 87, 80, 96, 0, 133, 81, 20, 21, 91, 128, 97, 56, 139, 87, 80, 96, 3, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 136, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 91, 128, 97, 56, 150, 87, 80, 96, 0, 52, 17, 91, 128, 97, 56, 163, 87, 80, 98, 9, 58, 128, 132, 16, 91, 91, 21, 97, 56, 178, 87, 97, 0, 2, 86, 97, 56, 222, 86, 91, 130, 21, 128, 21, 97, 56, 211, 87, 80, 97, 56, 196, 136, 97, 69, 70, 86, 91, 21, 128, 97, 56, 210, 87, 80, 98, 18, 117, 0, 132, 16, 91, 91, 21, 97, 56, 221, 87, 97, 0, 2, 86, 91, 91, 98, 73, 212, 0, 132, 17, 21, 97, 56, 238, 87, 97, 0, 2, 86, 91, 96, 17, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 128, 97, 57, 14, 87, 80, 96, 15, 96, 0, 80, 84, 66, 16, 91, 128, 97, 57, 39, 87, 80, 96, 12, 96, 0, 80, 84, 52, 16, 128, 21, 97, 57, 38, 87, 80, 130, 21, 91, 91, 21, 97, 57, 49, 87, 97, 0, 2, 86, 91, 66, 132, 66, 1, 16, 21, 97, 57, 64, 87, 97, 0, 2, 86, 91, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 21, 97, 57, 121, 87, 97, 0, 2, 86, 91, 96, 0, 96, 0, 80, 128, 84, 128, 145, 144, 96, 1, 1, 144, 144, 129, 84, 129, 131, 85, 129, 129, 21, 17, 97, 59, 138, 87, 96, 14, 2, 129, 96, 14, 2, 131, 96, 0, 82, 96, 32, 96, 0, 32, 145, 130, 1, 145, 1, 97, 59, 137, 145, 144, 97, 57, 180, 86, 91, 128, 130, 17, 21, 97, 59, 133, 87, 96, 0, 96, 0, 130, 1, 96, 0, 97, 1, 0, 10, 129, 84, 144, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 25, 22, 144, 85, 96, 1, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 2, 130, 1, 96, 0, 80, 128, 84, 96, 1, 129, 96, 1, 22, 21, 97, 1, 0, 2, 3, 22, 96, 2, 144, 4, 96, 0, 130, 85, 128, 96, 31, 16, 97, 58, 28, 87, 80, 97, 58, 89, 86, 91, 96, 31, 1, 96, 32, 144, 4, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 129, 1, 144, 97, 58, 88, 145, 144, 97, 58, 58, 86, 91, 128, 130, 17, 21, 97, 58, 84, 87, 96, 0, 129, 129, 80, 96, 0, 144, 85, 80, 96, 1, 1, 97, 58, 58, 86, 91, 80, 144, 86, 91, 91, 80, 96, 3, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 4, 130, 1, 96, 0, 97, 1, 0, 10, 129, 84, 144, 96, 255, 2, 25, 22, 144, 85, 96, 4, 130, 1, 96, 1, 97, 1, 0, 10, 129, 84, 144, 96, 255, 2, 25, 22, 144, 85, 96, 5, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 6, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 7, 130, 1, 96, 0, 97, 1, 0, 10, 129, 84, 144, 96, 255, 2, 25, 22, 144, 85, 96, 8, 130, 1, 96, 0, 80, 128, 84, 96, 0, 130, 85, 96, 4, 2, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 129, 1, 144, 97, 59, 61, 145, 144, 97, 58, 222, 86, 91, 128, 130, 17, 21, 97, 59, 57, 87, 96, 0, 96, 0, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 1, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 2, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 3, 130, 1, 96, 0, 97, 1, 0, 10, 129, 84, 144, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 25, 22, 144, 85, 80, 96, 1, 1, 97, 58, 222, 86, 91, 80, 144, 86, 91, 91, 80, 96, 9, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 10, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 13, 130, 1, 96, 0, 97, 1, 0, 10, 129, 84, 144, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 25, 22, 144, 85, 80, 96, 1, 1, 97, 57, 180, 86, 91, 80, 144, 86, 91, 91, 80, 80, 80, 145, 80, 129, 80, 96, 0, 96, 0, 80, 130, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 144, 80, 135, 129, 96, 0, 1, 96, 0, 97, 1, 0, 10, 129, 84, 129, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 134, 129, 96, 1, 1, 96, 0, 80, 129, 144, 85, 80, 133, 129, 96, 2, 1, 96, 0, 80, 144, 128, 81, 144, 96, 32, 1, 144, 130, 128, 84, 96, 1, 129, 96, 1, 22, 21, 97, 1, 0, 2, 3, 22, 96, 2, 144, 4, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 31, 1, 96, 32, 144, 4, 129, 1, 146, 130, 96, 31, 16, 97, 60, 62, 87, 128, 81, 96, 255, 25, 22, 131, 128, 1, 23, 133, 85, 97, 60, 111, 86, 91, 130, 128, 1, 96, 1, 1, 133, 85, 130, 21, 97, 60, 111, 87, 145, 130, 1, 91, 130, 129, 17, 21, 97, 60, 110, 87, 130, 81, 130, 96, 0, 80, 85, 145, 96, 32, 1, 145, 144, 96, 1, 1, 144, 97, 60, 80, 86, 91, 91, 80, 144, 80, 97, 60, 154, 145, 144, 97, 60, 124, 86, 91, 128, 130, 17, 21, 97, 60, 150, 87, 96, 0, 129, 129, 80, 96, 0, 144, 85, 80, 96, 1, 1, 97, 60, 124, 86, 91, 80, 144, 86, 91, 80, 80, 135, 135, 134, 96, 64, 81, 128, 132, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 20, 1, 131, 129, 82, 96, 32, 1, 130, 128, 81, 144, 96, 32, 1, 144, 128, 131, 131, 130, 144, 96, 0, 96, 4, 96, 32, 132, 96, 31, 1, 4, 96, 15, 2, 96, 3, 1, 241, 80, 144, 80, 1, 147, 80, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 32, 129, 96, 5, 1, 96, 0, 80, 129, 144, 85, 80, 131, 66, 1, 129, 96, 3, 1, 96, 0, 80, 129, 144, 85, 80, 96, 1, 129, 96, 4, 1, 96, 0, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 130, 129, 96, 7, 1, 96, 0, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 130, 21, 97, 61, 250, 87, 128, 96, 8, 1, 96, 0, 80, 128, 84, 128, 145, 144, 96, 1, 1, 144, 144, 129, 84, 129, 131, 85, 129, 129, 21, 17, 97, 61, 245, 87, 96, 4, 2, 129, 96, 4, 2, 131, 96, 0, 82, 96, 32, 96, 0, 32, 145, 130, 1, 145, 1, 97, 61, 244, 145, 144, 97, 61, 149, 86, 91, 128, 130, 17, 21, 97, 61, 240, 87, 96, 0, 96, 0, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 1, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 2, 130, 1, 96, 0, 80, 96, 0, 144, 85, 96, 3, 130, 1, 96, 0, 97, 1, 0, 10, 129, 84, 144, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 25, 22, 144, 85, 80, 96, 1, 1, 97, 61, 149, 86, 91, 80, 144, 86, 91, 91, 80, 80, 80, 80, 91, 51, 129, 96, 13, 1, 96, 0, 97, 1, 0, 10, 129, 84, 129, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 52, 129, 96, 6, 1, 96, 0, 80, 129, 144, 85, 80, 52, 96, 13, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 129, 127, 87, 144, 222, 44, 39, 158, 88, 38, 155, 147, 177, 40, 40, 245, 111, 213, 242, 188, 138, 209, 94, 97, 206, 8, 87, 37, 133, 200, 26, 56, 117, 111, 137, 137, 134, 138, 96, 64, 81, 128, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 132, 129, 82, 96, 32, 1, 131, 129, 82, 96, 32, 1, 128, 96, 32, 1, 130, 129, 3, 130, 82, 131, 129, 129, 81, 129, 82, 96, 32, 1, 145, 80, 128, 81, 144, 96, 32, 1, 144, 128, 131, 131, 130, 144, 96, 0, 96, 4, 96, 32, 132, 96, 31, 1, 4, 96, 15, 2, 96, 3, 1, 241, 80, 144, 80, 144, 129, 1, 144, 96, 31, 22, 128, 21, 97, 62, 243, 87, 128, 130, 3, 128, 81, 96, 1, 131, 96, 32, 3, 97, 1, 0, 10, 3, 25, 22, 129, 82, 96, 32, 1, 145, 80, 91, 80, 149, 80, 80, 80, 80, 80, 80, 96, 64, 81, 128, 145, 3, 144, 162, 91, 80, 150, 149, 80, 80, 80, 80, 80, 80, 86, 91, 96, 22, 96, 0, 80, 84, 129, 86, 91, 96, 0, 96, 20, 96, 0, 80, 96, 0, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 144, 80, 97, 63, 81, 86, 91, 145, 144, 80, 86, 91, 96, 0, 129, 96, 21, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 140, 91, 225, 229, 235, 236, 125, 91, 209, 79, 113, 66, 125, 30, 132, 243, 221, 3, 20, 192, 247, 178, 41, 30, 91, 32, 10, 200, 199, 195, 185, 37, 132, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 163, 96, 1, 144, 80, 97, 64, 36, 86, 91, 146, 145, 80, 80, 86, 91, 96, 0, 96, 21, 96, 0, 80, 96, 0, 132, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 96, 0, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 144, 80, 97, 64, 141, 86, 91, 146, 145, 80, 80, 86, 91, 96, 15, 96, 0, 80, 84, 129, 86, 91, 96, 16, 96, 0, 80, 84, 129, 86, 91, 96, 17, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 129, 86, 91, 96, 17, 96, 1, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 86, 91, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 86, 91, 96, 0, 96, 0, 96, 0, 80, 130, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 144, 80, 128, 96, 4, 1, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 21, 97, 65, 90, 87, 128, 96, 6, 1, 96, 0, 80, 84, 96, 13, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 91, 96, 0, 129, 96, 4, 1, 96, 0, 97, 1, 0, 10, 129, 84, 129, 96, 255, 2, 25, 22, 144, 131, 2, 23, 144, 85, 80, 91, 80, 80, 86, 91, 96, 0, 96, 0, 96, 0, 52, 17, 21, 97, 65, 140, 87, 97, 0, 2, 86, 91, 96, 10, 96, 0, 80, 96, 0, 132, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 22, 96, 0, 80, 84, 96, 7, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 210, 204, 113, 143, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 97, 66, 88, 134, 97, 63, 24, 86, 91, 2, 4, 16, 21, 97, 66, 101, 87, 97, 0, 2, 86, 91, 96, 10, 96, 0, 80, 96, 0, 132, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 96, 22, 96, 0, 80, 84, 96, 7, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 210, 204, 113, 143, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 97, 67, 49, 134, 97, 63, 24, 86, 91, 2, 4, 3, 144, 80, 96, 7, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 2, 33, 3, 138, 132, 131, 96, 64, 81, 131, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 130, 129, 82, 96, 32, 1, 146, 80, 80, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 21, 21, 97, 67, 244, 87, 97, 0, 2, 86, 91, 128, 96, 10, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 96, 1, 145, 80, 97, 68, 57, 86, 91, 80, 145, 144, 80, 86, 91, 96, 0, 96, 0, 97, 68, 76, 133, 97, 63, 24, 86, 91, 131, 96, 10, 96, 0, 80, 96, 0, 136, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 2, 4, 144, 80, 96, 10, 96, 0, 80, 96, 0, 134, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 129, 17, 21, 97, 68, 189, 87, 97, 0, 2, 86, 91, 128, 96, 10, 96, 0, 80, 96, 0, 135, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 128, 96, 10, 96, 0, 80, 96, 0, 134, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 96, 1, 145, 80, 97, 69, 62, 86, 91, 80, 147, 146, 80, 80, 80, 86, 91, 96, 0, 96, 4, 96, 0, 80, 96, 0, 131, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 96, 255, 22, 128, 97, 70, 118, 87, 80, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 20, 128, 21, 97, 70, 117, 87, 80, 96, 18, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 210, 204, 113, 143, 96, 64, 81, 129, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 144, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 96, 6, 96, 0, 80, 84, 17, 91, 91, 21, 97, 70, 136, 87, 96, 1, 144, 80, 97, 70, 146, 86, 97, 70, 145, 86, 91, 96, 0, 144, 80, 97, 70, 146, 86, 91, 91, 145, 144, 80, 86, 91, 96, 0, 96, 5, 96, 0, 80, 96, 0, 48, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 97, 70, 209, 97, 44, 183, 86, 91, 1, 96, 3, 2, 96, 22, 96, 0, 80, 84, 131, 2, 4, 96, 1, 96, 0, 80, 84, 96, 22, 96, 0, 80, 84, 4, 1, 144, 80, 97, 70, 243, 86, 91, 145, 144, 80, 86, 91, 96, 0, 129, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 144, 70, 254, 253, 102, 245, 56, 171, 53, 38, 50, 72, 164, 66, 23, 220, 183, 14, 46, 178, 205, 19, 102, 41, 225, 65, 184, 184, 249, 240, 59, 96, 96, 64, 81, 128, 144, 80, 96, 64, 81, 128, 145, 3, 144, 162, 96, 14, 96, 0, 144, 84, 144, 97, 1, 0, 10, 144, 4, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 99, 226, 250, 240, 68, 131, 96, 0, 96, 0, 98, 35, 152, 128, 66, 1, 96, 64, 81, 133, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 82, 96, 4, 1, 128, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 132, 129, 82, 96, 32, 1, 131, 129, 82, 96, 32, 1, 130, 129, 82, 96, 32, 1, 148, 80, 80, 80, 80, 80, 96, 32, 96, 64, 81, 128, 131, 3, 129, 96, 0, 135, 97, 97, 218, 90, 3, 241, 21, 97, 0, 2, 87, 80, 80, 80, 96, 64, 81, 128, 81, 144, 96, 32, 1, 80, 144, 80, 97, 72, 17, 86, 91, 145, 144, 80, 86, 91, 96, 0, 96, 0, 96, 0, 96, 11, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 20, 21, 97, 72, 91, 87, 96, 0, 145, 80, 97, 73, 8, 86, 91, 96, 0, 96, 0, 80, 96, 11, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 129, 84, 129, 16, 21, 97, 0, 2, 87, 144, 96, 0, 82, 96, 32, 96, 0, 32, 144, 96, 14, 2, 1, 96, 0, 91, 80, 144, 80, 128, 96, 3, 1, 96, 0, 80, 84, 66, 17, 21, 97, 72, 254, 87, 96, 0, 96, 11, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 129, 144, 85, 80, 96, 0, 145, 80, 97, 73, 8, 86, 97, 73, 7, 86, 91, 96, 1, 145, 80, 97, 73, 8, 86, 91, 91, 80, 145, 144, 80, 86, 91, 96, 0, 96, 0, 52, 17, 21, 97, 73, 30, 87, 97, 0, 2, 86, 91, 129, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 16, 21, 128, 21, 97, 73, 93, 87, 80, 96, 0, 130, 17, 91, 21, 97, 74, 76, 87, 129, 96, 20, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 129, 96, 20, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 132, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 163, 96, 1, 144, 80, 97, 74, 86, 86, 97, 74, 85, 86, 91, 96, 0, 144, 80, 97, 74, 86, 86, 91, 91, 146, 145, 80, 80, 86, 91, 96, 0, 96, 0, 52, 17, 21, 97, 74, 108, 87, 97, 0, 2, 86, 91, 129, 96, 20, 96, 0, 80, 96, 0, 134, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 16, 21, 128, 21, 97, 75, 4, 87, 80, 129, 96, 21, 96, 0, 80, 96, 0, 134, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 84, 16, 21, 91, 128, 21, 97, 75, 16, 87, 80, 96, 0, 130, 17, 91, 21, 97, 76, 101, 87, 129, 96, 20, 96, 0, 80, 96, 0, 133, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 1, 146, 80, 80, 129, 144, 85, 80, 129, 96, 20, 96, 0, 80, 96, 0, 134, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 129, 96, 21, 96, 0, 80, 96, 0, 134, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 80, 96, 0, 51, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 129, 82, 96, 32, 1, 144, 129, 82, 96, 32, 1, 96, 0, 32, 96, 0, 130, 130, 130, 80, 84, 3, 146, 80, 80, 129, 144, 85, 80, 130, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 132, 115, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 22, 127, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 132, 96, 64, 81, 128, 130, 129, 82, 96, 32, 1, 145, 80, 80, 96, 64, 81, 128, 145, 3, 144, 163, 96, 1, 144, 80, 97, 76, 111, 86, 97, 76, 110, 86, 91, 96, 0, 144, 80, 97, 76, 111, 86, 91, 91, 147, 146, 80, 80, 80, 86)
sub:  Empty Sub Contract
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
1152825010753653967191794247644247831527454850547
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
[callable tx created] =============
907595097014931008877773296891882509434837078918
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: constructor
PC address: 141
Estimated Gas Usage: 215565 - 650370
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: fallback
PC address: 573
Estimated Gas Usage: 35024 - 152690
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x400051020049, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0010010000104001200400400901d12ebe1b195e5aa9748e62bd7734ae19b51f401010028001020240010200000208011010000000020204800040100010401010000002000080801040100480408000002004800200002008000200800008100000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 581
Estimated Gas Usage: 872 - 967
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 670
Estimated Gas Usage: 889 - 984
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000002003822, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: executeProposal(uint256,bytes)
PC address: 4368
Estimated Gas Usage: 4057 - 7494
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: executeProposal(uint256,bytes), txdata: 0x237e9492, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 9824
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 9885
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 9891
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 9897
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10014
Estimated Gas Usage: 18017 - 178391
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
Initial State:

Account: [CREATOR], balance: 0x410040000000000c0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb910, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10014
Estimated Gas Usage: 18017 - 178391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10080
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10097
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10242
Estimated Gas Usage: 18017 - 178391
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb934, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10242
Estimated Gas Usage: 18017 - 178391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10358
Estimated Gas Usage: 18017 - 178391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10398
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10553
Estimated Gas Usage: 18017 - 178391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10635
Estimated Gas Usage: 18017 - 178391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: retrieveDAOReward(bool)
PC address: 10642
Estimated Gas Usage: 18017 - 178391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6100400442811000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: retrieveDAOReward(bool), txdata: 0xa1da2fb920, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: halveMinQuorum()
PC address: 11498
Estimated Gas Usage: 14103 - 54809
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: halveMinQuorum(), txdata: 0x78524b2e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: halveMinQuorum()
PC address: 11510
Estimated Gas Usage: 1435 - 1530
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: halveMinQuorum(), txdata: 0x78524b2e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: halveMinQuorum()
PC address: 11599
Estimated Gas Usage: 1455 - 1550
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x810, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: halveMinQuorum(), txdata: 0x78524b2e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: halveMinQuorum()
PC address: 11606
Estimated Gas Usage: 14103 - 54809
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x7bfc1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: , value: 0x0
Caller: [CREATOR], function: halveMinQuorum(), txdata: 0x78524b2e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: halveMinQuorum()
PC address: 11619
Estimated Gas Usage: 2293 - 2388
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: halveMinQuorum(), txdata: 0x78524b2e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 11855
Estimated Gas Usage: 2605 - 3030
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 11867
Estimated Gas Usage: 2625 - 3050
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12022
Estimated Gas Usage: 2642 - 3067
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x7b82bc32, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12177
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12184
Estimated Gas Usage: 36719 - 154715
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12195
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12202
Estimated Gas Usage: 36719 - 154715
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12255
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12262
Estimated Gas Usage: 36719 - 154715
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12347
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12353
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12368
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12397
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12409
Estimated Gas Usage: 36719 - 154715
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: fallback
PC address: 12449
Estimated Gas Usage: 36719 - 154715
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01082080020104040001018000000000000000000000000000000000000000040104401008080402800180400802100102101002018000020202202040044000800110018001040840040480200280400810020101100480101010011001010100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000004c01040000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x3

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 12519
Estimated Gas Usage: 1300 - 1395
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 12543
Estimated Gas Usage: 1317 - 1412
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 12690
Estimated Gas Usage: 29503 - 230512
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 12755
Estimated Gas Usage: 29503 - 230512
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 12818
Estimated Gas Usage: 29503 - 230512
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 12935
Estimated Gas Usage: 29503 - 230512
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 12935
Estimated Gas Usage: 29503 - 230512
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 13050
Estimated Gas Usage: 29503 - 230512
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 13141
Estimated Gas Usage: 29503 - 230512
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 13164
Estimated Gas Usage: 29503 - 230512
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 13164
Estimated Gas Usage: 29503 - 230512
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: refund()
PC address: 13277
Estimated Gas Usage: 29503 - 230512
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 13346
Estimated Gas Usage: 29503 - 230512
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 13355
Estimated Gas Usage: 29503 - 230512
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: refund()
PC address: 13362
Estimated Gas Usage: 29503 - 230512
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: refund()
PC address: 13415
Estimated Gas Usage: 29503 - 230512
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: refund()
PC address: 13468
Estimated Gas Usage: 29503 - 230512
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: divisor()
PC address: 13488
Estimated Gas Usage: 2821 - 3197
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2003822, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: divisor(), txdata: 0x1f2dc5ef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: divisor()
PC address: 13494
Estimated Gas Usage: 1061 - 1156
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: divisor(), txdata: 0x1f2dc5ef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: divisor()
PC address: 13519
Estimated Gas Usage: 2821 - 3197
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: divisor(), txdata: 0x1f2dc5ef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MAIN
Function name: divisor()
PC address: 13525
Estimated Gas Usage: 1897 - 1992
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: divisor(), txdata: 0x1f2dc5ef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MAIN
Function name: divisor()
PC address: 13540
Estimated Gas Usage: 2821 - 3197
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2003822, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: divisor(), txdata: 0x1f2dc5ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 16202
Estimated Gas Usage: 17467 - 143374
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17045
Estimated Gas Usage: 17467 - 143374
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17051
Estimated Gas Usage: 17467 - 143374
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17057
Estimated Gas Usage: 17467 - 143374
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17174
Estimated Gas Usage: 17467 - 143374
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
Initial State:

Account: [CREATOR], balance: 0x200000800400080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17174
Estimated Gas Usage: 17467 - 143374
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17212
Estimated Gas Usage: 17467 - 143374
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17367
Estimated Gas Usage: 17467 - 143374
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17448
Estimated Gas Usage: 17467 - 143374
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MAIN
Function name: getMyReward()
PC address: 17455
Estimated Gas Usage: 17467 - 143374
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: getMyReward(), txdata: 0xcc9ae3f6, value: 0x0


time cost [86848s]
