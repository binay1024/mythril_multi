Function : setValueInContractB(address,uint256) with hash 0x4f2ecdb7 , address 70 found
Function : temp() with hash 0x673402e5 , address 98 found
Function : contractB() with hash 0x9ff8a368 , address 128 found
Function : fixed_address() with hash 0x379bf63c , address 70 found
Function : value() with hash 0x3fa4f245 , address 100 found
Function : setValue(address,uint256) with hash 0x48461b56 , address 130 found
Function : fixed_address() with hash 0x379bf63c , address 70 found
Function : value() with hash 0x3fa4f245 , address 100 found
Function : setValue(address,uint256) with hash 0x48461b56 , address 130 found
=========================
current opcode is {'address': 0, 'opcode': 'PUSH1', 'argument': '0x80'}
op code is PUSH1
=========================
current opcode is {'address': 2, 'opcode': 'PUSH1', 'argument': '0x40'}
op code is PUSH1
=========================
current opcode is {'address': 4, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 5, 'opcode': 'CALLVALUE'}
op code is CALLVALUE
=========================
current opcode is {'address': 6, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 7, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 8, 'opcode': 'PUSH2', 'argument': '0x0010'}
op code is PUSH2
=========================
current opcode is {'address': 11, 'opcode': 'JUMPI'}
Now in function: constructor in contract: SUB
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 12, 'opcode': 'PUSH1', 'argument': '0x00'}
now we have 2 global state (path)!
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 16, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 14, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 17, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 15, 'opcode': 'REVERT'}
now in creation end, the activate_function is: constructor
try to print global_state_call_chain: ['TX_1_SUB.constructor_revert']
END with EOA TX CASE: ContractCreationTransaction 1 from 1004753105490295263244812946565948198177742958590 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_1_SUB.constructor_revert']
op code is REVERT
=========================
current opcode is {'address': 18, 'opcode': 'PUSH2', 'argument': '0x0352'}
now we have 1 global state (path)!
op code is PUSH2
=========================
current opcode is {'address': 21, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 22, 'opcode': 'PUSH2', 'argument': '0x0020'}
op code is PUSH2
=========================
current opcode is {'address': 25, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 27, 'opcode': 'CODECOPY'}
op code is CODECOPY
=========================
current opcode is {'address': 28, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 30, 'opcode': 'RETURN'}
now in creation end, the activate_function is: constructor
Function : fixed_address() with hash 0x379bf63c , address 70 found
Function : value() with hash 0x3fa4f245 , address 100 found
Function : setValue(address,uint256) with hash 0x48461b56 , address 130 found
try to print global_state_call_chain: ['TX_1_SUB.constructor']
END with EOA TX CASE: ContractCreationTransaction 1 from 1004753105490295263244812946565948198177742958590 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f ***********
output EOA case global_state: ['TX_1_SUB.constructor']
End Transaction with EOA TX:  [%s]
call_chain is ['TX_1_SUB.constructor']
op code is RETURN
Multi analyze mode
Function : setValueInContractB(address,uint256) with hash 0x4f2ecdb7 , address 70 found
Function : temp() with hash 0x673402e5 , address 98 found
Function : contractB() with hash 0x9ff8a368 , address 128 found
=========================
current opcode is {'address': 0, 'opcode': 'PUSH1', 'argument': '0x80'}
op code is PUSH1
=========================
current opcode is {'address': 2, 'opcode': 'PUSH1', 'argument': '0x40'}
op code is PUSH1
=========================
current opcode is {'address': 4, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 5, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 7, 'opcode': 'PUSH1', 'argument': '0x01'}
op code is PUSH1
=========================
current opcode is {'address': 9, 'opcode': 'SSTORE'}
op code is SSTORE
=========================
current opcode is {'address': 10, 'opcode': 'CALLVALUE'}
op code is CALLVALUE
=========================
current opcode is {'address': 11, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 12, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 13, 'opcode': 'PUSH2', 'argument': '0x0015'}
op code is PUSH2
=========================
current opcode is {'address': 16, 'opcode': 'JUMPI'}
Now in function: constructor in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 17, 'opcode': 'PUSH1', 'argument': '0x00'}
now we have 2 global state (path)!
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 21, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 19, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 22, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 20, 'opcode': 'REVERT'}
now in creation end, the activate_function is: constructor
try to print global_state_call_chain: ['TX_2_MAIN.constructor_revert']
END with EOA TX CASE: ContractCreationTransaction 2 from 1004753105490295263244812946565948198177742958590 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_2_MAIN.constructor_revert']
op code is REVERT
=========================
current opcode is {'address': 23, 'opcode': 'PUSH1', 'argument': '0x40'}
now we have 1 global state (path)!
op code is PUSH1
=========================
current opcode is {'address': 25, 'opcode': 'MLOAD'}
op code is MLOAD
=========================
current opcode is {'address': 26, 'opcode': 'PUSH2', 'argument': '0x04e4'}
op code is PUSH2
=========================
current opcode is {'address': 29, 'opcode': 'CODESIZE'}
op code is CODESIZE
=========================
current opcode is {'address': 30, 'opcode': 'SUB'}
op code is SUB
=========================
current opcode is {'address': 31, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 32, 'opcode': 'PUSH2', 'argument': '0x04e4'}
op code is PUSH2
=========================
current opcode is {'address': 35, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 36, 'opcode': 'CODECOPY'}
op code is CODECOPY
=========================
current opcode is {'address': 37, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 38, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 39, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 40, 'opcode': 'PUSH1', 'argument': '0x40'}
op code is PUSH1
=========================
current opcode is {'address': 42, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 43, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 44, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 45, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 46, 'opcode': 'PUSH2', 'argument': '0x0037'}
op code is PUSH2
=========================
current opcode is {'address': 49, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 50, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 51, 'opcode': 'PUSH2', 'argument': '0x0092'}
op code is PUSH2
=========================
current opcode is {'address': 54, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 146, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 147, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 149, 'opcode': 'PUSH1', 'argument': '0x20'}
op code is PUSH1
=========================
current opcode is {'address': 151, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 152, 'opcode': 'DUP5'}
op code is DUP5
=========================
current opcode is {'address': 153, 'opcode': 'SUB'}
op code is SUB
=========================
current opcode is {'address': 154, 'opcode': 'SLT'}
op code is SLT
=========================
current opcode is {'address': 155, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 156, 'opcode': 'PUSH2', 'argument': '0x00a8'}
op code is PUSH2
=========================
current opcode is {'address': 159, 'opcode': 'JUMPI'}
unreached path
Now in function: constructor in contract: MAIN
op code is JUMPI
=========================
current opcode is {'address': 168, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 169, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 171, 'opcode': 'PUSH2', 'argument': '0x00b6'}
op code is PUSH2
=========================
current opcode is {'address': 174, 'opcode': 'DUP5'}
op code is DUP5
=========================
current opcode is {'address': 175, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 176, 'opcode': 'DUP6'}
op code is DUP6
=========================
current opcode is {'address': 177, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 178, 'opcode': 'PUSH2', 'argument': '0x007d'}
op code is PUSH2
=========================
current opcode is {'address': 181, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 125, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 126, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 128, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 129, 'opcode': 'MLOAD'}
op code is MLOAD
=========================
current opcode is {'address': 130, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 131, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 132, 'opcode': 'PUSH2', 'argument': '0x008c'}
op code is PUSH2
=========================
current opcode is {'address': 135, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 136, 'opcode': 'PUSH2', 'argument': '0x00f6'}
op code is PUSH2
=========================
current opcode is {'address': 139, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 246, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 247, 'opcode': 'PUSH2', 'argument': '0x00ff'}
op code is PUSH2
=========================
current opcode is {'address': 250, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 251, 'opcode': 'PUSH2', 'argument': '0x00bf'}
op code is PUSH2
=========================
current opcode is {'address': 254, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 191, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 192, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 194, 'opcode': 'PUSH2', 'argument': '0x00ca'}
op code is PUSH2
=========================
current opcode is {'address': 197, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 198, 'opcode': 'PUSH2', 'argument': '0x00d1'}
op code is PUSH2
=========================
current opcode is {'address': 201, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 209, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 210, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 212, 'opcode': 'PUSH20', 'argument': '0xffffffffffffffffffffffffffffffffffffffff'}
op code is PUSH20
=========================
current opcode is {'address': 233, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 234, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 235, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 236, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 237, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 238, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 239, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 240, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 202, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 203, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 204, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 205, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 206, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 207, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 208, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 255, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 256, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 257, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 258, 'opcode': 'PUSH2', 'argument': '0x010a'}
op code is PUSH2
=========================
current opcode is {'address': 261, 'opcode': 'JUMPI'}
Now in function: constructor in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 262, 'opcode': 'PUSH1', 'argument': '0x00'}
now we have 2 global state (path)!
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 266, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 264, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 267, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 265, 'opcode': 'REVERT'}
now in creation end, the activate_function is: constructor
try to print global_state_call_chain: ['TX_2_MAIN.constructor_revert']
END with EOA TX CASE: ContractCreationTransaction 2 from 1004753105490295263244812946565948198177742958590 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_2_MAIN.constructor_revert']
op code is REVERT
=========================
current opcode is {'address': 268, 'opcode': 'JUMP'}
now we have 1 global state (path)!
op code is JUMP
=========================
current opcode is {'address': 140, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 141, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 142, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 143, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 144, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 145, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 182, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 183, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 184, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 185, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 186, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 187, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 188, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 189, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 190, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 55, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 56, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 57, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 59, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 60, 'opcode': 'PUSH2', 'argument': '0x0100'}
op code is PUSH2
=========================
current opcode is {'address': 63, 'opcode': 'EXP'}
op code is EXP
=========================
current opcode is {'address': 64, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 65, 'opcode': 'SLOAD'}
op code is SLOAD
=========================
current opcode is {'address': 66, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 67, 'opcode': 'PUSH20', 'argument': '0xffffffffffffffffffffffffffffffffffffffff'}
op code is PUSH20
=========================
current opcode is {'address': 88, 'opcode': 'MUL'}
op code is MUL
=========================
current opcode is {'address': 89, 'opcode': 'NOT'}
op code is NOT
=========================
current opcode is {'address': 90, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 91, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 92, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 93, 'opcode': 'PUSH20', 'argument': '0xffffffffffffffffffffffffffffffffffffffff'}
op code is PUSH20
=========================
current opcode is {'address': 114, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 115, 'opcode': 'MUL'}
op code is MUL
=========================
current opcode is {'address': 116, 'opcode': 'OR'}
op code is OR
=========================
current opcode is {'address': 117, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 118, 'opcode': 'SSTORE'}
op code is SSTORE
=========================
current opcode is {'address': 119, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 120, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 121, 'opcode': 'PUSH2', 'argument': '0x010d'}
op code is PUSH2
=========================
current opcode is {'address': 124, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 269, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 270, 'opcode': 'PUSH2', 'argument': '0x03c8'}
op code is PUSH2
=========================
current opcode is {'address': 273, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 274, 'opcode': 'PUSH2', 'argument': '0x011c'}
op code is PUSH2
=========================
current opcode is {'address': 277, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 279, 'opcode': 'CODECOPY'}
op code is CODECOPY
=========================
current opcode is {'address': 280, 'opcode': 'PUSH1', 'argument': '0x00'}
op code is PUSH1
=========================
current opcode is {'address': 282, 'opcode': 'RETURN'}
now in creation end, the activate_function is: constructor
Function : setValueInContractB(address,uint256) with hash 0x4f2ecdb7 , address 70 found
Function : temp() with hash 0x673402e5 , address 98 found
Function : contractB() with hash 0x9ff8a368 , address 128 found
try to print global_state_call_chain: ['TX_2_MAIN.constructor']
END with EOA TX CASE: ContractCreationTransaction 2 from 1004753105490295263244812946565948198177742958590 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
output EOA case global_state: ['TX_2_MAIN.constructor']
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is ['TX_2_MAIN.constructor']
op code is RETURN
main:  
Excute 0 TX Loop!!!
Now we have 1 open states!!!
Starting message call transaction, iteration: 0, 1 initial states
Starting message call transaction to: 321474317806661133005631537738372018995223047802
=========================
current opcode is {'address': 0, 'opcode': 'PUSH1', 'argument': (128,)}
op code is PUSH1
=========================
current opcode is {'address': 2, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 4, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 5, 'opcode': 'CALLVALUE'}
op code is CALLVALUE
=========================
current opcode is {'address': 6, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 7, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 8, 'opcode': 'PUSH2', 'argument': (0, 16)}
op code is PUSH2
=========================
current opcode is {'address': 11, 'opcode': 'JUMPI'}
Now in function: fallback in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 12, 'opcode': 'PUSH1', 'argument': (0,)}
now we have 2 global state (path)!
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 16, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 14, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 17, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 15, 'opcode': 'REVERT'}
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: ['TX_3_MAIN.fallback_revert']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_3_MAIN.fallback_revert']
op code is REVERT
=========================
current opcode is {'address': 18, 'opcode': 'PUSH1', 'argument': (4,)}
now we have 1 global state (path)!
op code is PUSH1
=========================
current opcode is {'address': 20, 'opcode': 'CALLDATASIZE'}
op code is CALLDATASIZE
=========================
current opcode is {'address': 21, 'opcode': 'LT'}
op code is LT
=========================
current opcode is {'address': 22, 'opcode': 'PUSH2', 'argument': (0, 65)}
op code is PUSH2
=========================
current opcode is {'address': 25, 'opcode': 'JUMPI'}
Now in function: fallback in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 26, 'opcode': 'PUSH1', 'argument': (0,)}
now we have 2 global state (path)!
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 65, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 28, 'opcode': 'CALLDATALOAD'}
op code is CALLDATALOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 66, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 29, 'opcode': 'PUSH1', 'argument': (224,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 68, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 31, 'opcode': 'SHR'}
op code is SHR
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 69, 'opcode': 'REVERT'}
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: ['TX_3_MAIN.fallback_revert']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_3_MAIN.fallback_revert']
op code is REVERT
=========================
current opcode is {'address': 32, 'opcode': 'DUP1'}
now we have 1 global state (path)!
op code is DUP1
=========================
current opcode is {'address': 33, 'opcode': 'PUSH4', 'argument': (79, 46, 205, 183)}
op code is PUSH4
=========================
current opcode is {'address': 38, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 39, 'opcode': 'PUSH2', 'argument': (0, 70)}
op code is PUSH2
=========================
current opcode is {'address': 42, 'opcode': 'JUMPI'}
Now in function: fallback in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 43, 'opcode': 'DUP1'}
now we have 2 global state (path)!
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 70, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 44, 'opcode': 'PUSH4', 'argument': (103, 52, 2, 229)}
op code is PUSH4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 71, 'opcode': 'PUSH2', 'argument': (0, 96)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 49, 'opcode': 'EQ'}
op code is EQ
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 74, 'opcode': 'PUSH1', 'argument': (4,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 50, 'opcode': 'PUSH2', 'argument': (0, 98)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 76, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 53, 'opcode': 'JUMPI'}
Now in function: fallback in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 77, 'opcode': 'CALLDATASIZE'}
now we have 3 global state (path)!
op code is CALLDATASIZE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 54, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 98, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 78, 'opcode': 'SUB'}
op code is SUB
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 55, 'opcode': 'PUSH4', 'argument': (159, 248, 163, 104)}
op code is PUSH4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 99, 'opcode': 'PUSH2', 'argument': (0, 106)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 79, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 60, 'opcode': 'EQ'}
op code is EQ
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 102, 'opcode': 'PUSH2', 'argument': (1, 72)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 80, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 61, 'opcode': 'PUSH2', 'argument': (0, 128)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 105, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 81, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 64, 'opcode': 'JUMPI'}
Now in function: fallback in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 328, 'opcode': 'JUMPDEST'}
now we have 4 global state (path)!
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 82, 'opcode': 'PUSH2', 'argument': (0, 91)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 65, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 128, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 329, 'opcode': 'PUSH1', 'argument': (1,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 85, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 66, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 129, 'opcode': 'PUSH2', 'argument': (0, 136)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 331, 'opcode': 'SLOAD'}
op code is SLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 86, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 68, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 132, 'opcode': 'PUSH2', 'argument': (1, 78)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 332, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 87, 'opcode': 'PUSH2', 'argument': (1, 156)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 69, 'opcode': 'REVERT'}
now in msTX end, the activate_function is: fallback
try to print global_state_call_chain: ['TX_3_MAIN.fallback_revert']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_3_MAIN.fallback_revert']
op code is REVERT
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 135, 'opcode': 'JUMP'}
now we have 3 global state (path)!
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 333, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 90, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 334, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 106, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 412, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 335, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 107, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 413, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 337, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 109, 'opcode': 'MLOAD'}
op code is MLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 415, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 338, 'opcode': 'SLOAD'}
op code is SLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 110, 'opcode': 'PUSH2', 'argument': (0, 119)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 416, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 339, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 113, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 418, 'opcode': 'DUP4'}
op code is DUP4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 340, 'opcode': 'PUSH2', 'argument': (1, 0)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 114, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 419, 'opcode': 'DUP6'}
op code is DUP6
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 343, 'opcode': 'EXP'}
op code is EXP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 115, 'opcode': 'PUSH2', 'argument': (2, 77)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 420, 'opcode': 'SUB'}
op code is SUB
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 344, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 118, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 421, 'opcode': 'SLT'}
op code is SLT
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 345, 'opcode': 'DIV'}
op code is DIV
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 589, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 422, 'opcode': 'ISZERO'}
op code is ISZERO
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 346, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 590, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 423, 'opcode': 'PUSH2', 'argument': (1, 179)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 367, 'opcode': 'AND'}
op code is AND
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 592, 'opcode': 'PUSH1', 'argument': (32,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 426, 'opcode': 'JUMPI'}
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 368, 'opcode': 'DUP2'}
now we have 4 global state (path)!
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 594, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 427, 'opcode': 'PUSH2', 'argument': (1, 178)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 435, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 369, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 595, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 430, 'opcode': 'PUSH2', 'argument': (3, 95)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 436, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 136, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 596, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 433, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 438, 'opcode': 'PUSH2', 'argument': (1, 193)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 137, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 597, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 863, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 441, 'opcode': 'DUP6'}
op code is DUP6
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 139, 'opcode': 'MLOAD'}
op code is MLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 598, 'opcode': 'PUSH2', 'argument': (2, 98)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 864, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 442, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 140, 'opcode': 'PUSH2', 'argument': (0, 149)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 601, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 866, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 443, 'opcode': 'DUP7'}
op code is DUP7
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 143, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 603, 'opcode': 'DUP4'}
op code is DUP4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 867, 'opcode': 'REVERT'}
now in msTX end, the activate_function is: setValueInContractB(address,uint256)
try to print global_state_call_chain: ['TX_3_MAIN.setValueInContractB(address,uint256)_revert']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_3_MAIN.setValueInContractB(address,uint256)_revert']
op code is REVERT
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 444, 'opcode': 'ADD'}
now we have 3 global state (path)!
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 144, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 604, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 445, 'opcode': 'PUSH2', 'argument': (1, 114)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 145, 'opcode': 'PUSH2', 'argument': (2, 50)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 605, 'opcode': 'DUP5'}
op code is DUP5
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 448, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 148, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 606, 'opcode': 'PUSH2', 'argument': (1, 250)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 370, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 562, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 609, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 371, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 563, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 506, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 373, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 565, 'opcode': 'PUSH1', 'argument': (32,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 507, 'opcode': 'PUSH2', 'argument': (2, 3)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 374, 'opcode': 'CALLDATALOAD'}
op code is CALLDATALOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 567, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 510, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 375, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 568, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 511, 'opcode': 'PUSH2', 'argument': (2, 240)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 376, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 569, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 514, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 377, 'opcode': 'PUSH2', 'argument': (1, 129)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 570, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 752, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 380, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 571, 'opcode': 'PUSH2', 'argument': (2, 71)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 753, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 381, 'opcode': 'PUSH2', 'argument': (3, 100)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 574, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 755, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 384, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 576, 'opcode': 'DUP4'}
op code is DUP4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 756, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 868, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 577, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 757, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 869, 'opcode': 'PUSH2', 'argument': (3, 109)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 578, 'opcode': 'DUP5'}
op code is DUP5
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 758, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 872, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 579, 'opcode': 'PUSH2', 'argument': (1, 235)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 759, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 873, 'opcode': 'PUSH2', 'argument': (2, 190)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 582, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 760, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 876, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 491, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 761, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 702, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 492, 'opcode': 'PUSH2', 'argument': (1, 244)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 515, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 703, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 495, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 516, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 705, 'opcode': 'PUSH2', 'argument': (2, 201)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 496, 'opcode': 'PUSH2', 'argument': (2, 250)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 517, 'opcode': 'MSTORE'}
op code is MSTORE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 708, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 499, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 518, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 709, 'opcode': 'PUSH2', 'argument': (2, 208)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 762, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 519, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 712, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 763, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 520, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 720, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 765, 'opcode': 'PUSH2', 'argument': (3, 5)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 610, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 721, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 768, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 611, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 723, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 769, 'opcode': 'PUSH2', 'argument': (3, 12)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 612, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 744, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 772, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 613, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 745, 'opcode': 'AND'}
op code is AND
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 780, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 614, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 746, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 781, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 615, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 747, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 783, 'opcode': 'PUSH2', 'argument': (3, 23)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 119, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 748, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 786, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 120, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 749, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 787, 'opcode': 'PUSH2', 'argument': (3, 30)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 122, 'opcode': 'MLOAD'}
op code is MLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 750, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 790, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 123, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 751, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 798, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 124, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 713, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 799, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 125, 'opcode': 'SUB'}
op code is SUB
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 714, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 801, 'opcode': 'PUSH2', 'argument': (3, 41)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 126, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 715, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 804, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 127, 'opcode': 'RETURN'}
now in msTX end, the activate_function is: temp()
try to print global_state_call_chain: ['TX_3_MAIN.temp()']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
output EOA case global_state: ['TX_3_MAIN.temp()']
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is ['TX_3_MAIN.temp()']
op code is RETURN
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 716, 'opcode': 'SWAP2'}
now we have 2 global state (path)!
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 805, 'opcode': 'PUSH2', 'argument': (2, 208)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 717, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 808, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 718, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 720, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 719, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 721, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 877, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 723, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 878, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 744, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 879, 'opcode': 'EQ'}
op code is EQ
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 745, 'opcode': 'AND'}
op code is AND
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 880, 'opcode': 'PUSH2', 'argument': (3, 120)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 746, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 883, 'opcode': 'JUMPI'}
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 747, 'opcode': 'POP'}
now we have 3 global state (path)!
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 884, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 888, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 748, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 886, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 889, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 749, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 887, 'opcode': 'REVERT'}
now in msTX end, the activate_function is: setValueInContractB(address,uint256)
try to print global_state_call_chain: ['TX_3_MAIN.setValueInContractB(address,uint256)_revert']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_3_MAIN.setValueInContractB(address,uint256)_revert']
op code is REVERT
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 890, 'opcode': 'JUMP'}
now we have 2 global state (path)!
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 750, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 385, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 751, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 386, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 809, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 387, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 810, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 388, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 811, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 389, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 812, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 390, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 813, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 449, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 814, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 450, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 815, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 451, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 791, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 452, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 792, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 453, 'opcode': 'PUSH1', 'argument': (32,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 793, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 455, 'opcode': 'PUSH2', 'argument': (1, 210)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 794, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 458, 'opcode': 'DUP6'}
op code is DUP6
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 795, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 459, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 796, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 460, 'opcode': 'DUP7'}
op code is DUP7
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 797, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 461, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 773, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 462, 'opcode': 'PUSH2', 'argument': (1, 135)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 774, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 465, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 775, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 391, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 776, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 392, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 777, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 394, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 778, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 395, 'opcode': 'CALLDATALOAD'}
op code is CALLDATALOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 779, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 396, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 500, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 397, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 501, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 398, 'opcode': 'PUSH2', 'argument': (1, 150)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 502, 'opcode': 'MSTORE'}
op code is MSTORE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 401, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 503, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 402, 'opcode': 'PUSH2', 'argument': (3, 123)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 504, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 405, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 505, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 891, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 583, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 892, 'opcode': 'PUSH2', 'argument': (3, 132)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 584, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 895, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 585, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 896, 'opcode': 'PUSH2', 'argument': (2, 240)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 586, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 899, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 587, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 752, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 588, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 753, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 149, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 755, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 150, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 756, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 152, 'opcode': 'MLOAD'}
op code is MLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 757, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 153, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 758, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 154, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 759, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 155, 'opcode': 'SUB'}
op code is SUB
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 760, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 156, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 761, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 157, 'opcode': 'RETURN'}
now in msTX end, the activate_function is: contractB()
try to print global_state_call_chain: ['TX_3_MAIN.contractB()']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
output EOA case global_state: ['TX_3_MAIN.contractB()']
catch PluginSkipWorldState exception!
End Transaction with EOA TX:  [%s]
call_chain is ['TX_3_MAIN.contractB()']
op code is RETURN
=========================
current opcode is {'address': 900, 'opcode': 'JUMPDEST'}
now we have 1 global state (path)!
op code is JUMPDEST
=========================
current opcode is {'address': 901, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 902, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 903, 'opcode': 'PUSH2', 'argument': (3, 143)}
op code is PUSH2
=========================
current opcode is {'address': 906, 'opcode': 'JUMPI'}
unreached path
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
=========================
current opcode is {'address': 911, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 912, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 913, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 406, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 407, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 408, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 409, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 410, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 411, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 466, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 467, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 468, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 469, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 470, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 471, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 472, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 473, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 474, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 475, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 91, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 92, 'opcode': 'PUSH2', 'argument': (0, 158)}
op code is PUSH2
=========================
current opcode is {'address': 95, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 158, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 159, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 161, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 162, 'opcode': 'SLOAD'}
op code is SLOAD
=========================
current opcode is {'address': 163, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 164, 'opcode': 'PUSH2', 'argument': (1, 0)}
op code is PUSH2
=========================
current opcode is {'address': 167, 'opcode': 'EXP'}
op code is EXP
=========================
current opcode is {'address': 168, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 169, 'opcode': 'DIV'}
op code is DIV
=========================
current opcode is {'address': 170, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 191, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 192, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 213, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 214, 'opcode': 'PUSH4', 'argument': (72, 70, 27, 86)}
op code is PUSH4
=========================
current opcode is {'address': 219, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 220, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 221, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 223, 'opcode': 'MLOAD'}
op code is MLOAD
=========================
current opcode is {'address': 224, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 225, 'opcode': 'PUSH4', 'argument': (255, 255, 255, 255)}
op code is PUSH4
=========================
current opcode is {'address': 230, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 231, 'opcode': 'PUSH1', 'argument': (224,)}
op code is PUSH1
=========================
current opcode is {'address': 233, 'opcode': 'SHL'}
op code is SHL
=========================
current opcode is {'address': 234, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 235, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 236, 'opcode': 'PUSH1', 'argument': (4,)}
op code is PUSH1
=========================
current opcode is {'address': 238, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 239, 'opcode': 'PUSH2', 'argument': (0, 249)}
op code is PUSH2
=========================
current opcode is {'address': 242, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 243, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 244, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 245, 'opcode': 'PUSH2', 'argument': (2, 9)}
op code is PUSH2
=========================
current opcode is {'address': 248, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 521, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 522, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 524, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 526, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 527, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 528, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 529, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 530, 'opcode': 'PUSH2', 'argument': (2, 30)}
op code is PUSH2
=========================
current opcode is {'address': 533, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 535, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 536, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 537, 'opcode': 'DUP6'}
op code is DUP6
=========================
current opcode is {'address': 538, 'opcode': 'PUSH2', 'argument': (1, 220)}
op code is PUSH2
=========================
current opcode is {'address': 541, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 476, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 477, 'opcode': 'PUSH2', 'argument': (1, 229)}
op code is PUSH2
=========================
current opcode is {'address': 480, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 481, 'opcode': 'PUSH2', 'argument': (2, 190)}
op code is PUSH2
=========================
current opcode is {'address': 484, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 702, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 703, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 705, 'opcode': 'PUSH2', 'argument': (2, 201)}
op code is PUSH2
=========================
current opcode is {'address': 708, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 709, 'opcode': 'PUSH2', 'argument': (2, 208)}
op code is PUSH2
=========================
current opcode is {'address': 712, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 720, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 721, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 723, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 744, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 745, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 746, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 747, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 748, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 749, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 750, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 751, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 713, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 714, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 715, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 716, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 717, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 718, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 719, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 485, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 486, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 487, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 488, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 489, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 490, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 542, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 543, 'opcode': 'PUSH2', 'argument': (2, 43)}
op code is PUSH2
=========================
current opcode is {'address': 546, 'opcode': 'PUSH1', 'argument': (32,)}
op code is PUSH1
=========================
current opcode is {'address': 548, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 549, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 550, 'opcode': 'DUP5'}
op code is DUP5
=========================
current opcode is {'address': 551, 'opcode': 'PUSH2', 'argument': (1, 250)}
op code is PUSH2
=========================
current opcode is {'address': 554, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 506, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 507, 'opcode': 'PUSH2', 'argument': (2, 3)}
op code is PUSH2
=========================
current opcode is {'address': 510, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 511, 'opcode': 'PUSH2', 'argument': (2, 240)}
op code is PUSH2
=========================
current opcode is {'address': 514, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 752, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 753, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 755, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 756, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 757, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 758, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 759, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 760, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 761, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 515, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 516, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 517, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 518, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 519, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 520, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 555, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 556, 'opcode': 'SWAP4'}
op code is SWAP4
=========================
current opcode is {'address': 557, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 558, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 559, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 560, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 561, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 249, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 250, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 252, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 254, 'opcode': 'MLOAD'}
op code is MLOAD
=========================
current opcode is {'address': 255, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 256, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 257, 'opcode': 'SUB'}
op code is SUB
=========================
current opcode is {'address': 258, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 259, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 261, 'opcode': 'DUP8'}
op code is DUP8
=========================
current opcode is {'address': 262, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 263, 'opcode': 'EXTCODESIZE'}
op code is EXTCODESIZE
=========================
current opcode is {'address': 264, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 265, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 266, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 267, 'opcode': 'PUSH2', 'argument': (1, 19)}
op code is PUSH2
=========================
current opcode is {'address': 270, 'opcode': 'JUMPI'}
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 271, 'opcode': 'PUSH1', 'argument': (0,)}
now we have 2 global state (path)!
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 275, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 273, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 276, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 274, 'opcode': 'REVERT'}
now in msTX end, the activate_function is: setValueInContractB(address,uint256)
try to print global_state_call_chain: ['TX_3_MAIN.setValueInContractB(address,uint256)_revert']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
End Transaction with messagecall Revert: [%s]
call_chain is ['TX_3_MAIN.setValueInContractB(address,uint256)_revert']
op code is REVERT
=========================
current opcode is {'address': 277, 'opcode': 'GAS'}
now we have 1 global state (path)!
op code is GAS
=========================
current opcode is {'address': 278, 'opcode': 'CALL'}
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
add callable sc
321474317806661133005631537738372018995223047802
MAIN
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
51421440056055728346017419001665401074216449311
sender_3
not a empty account [<mythril.laser.ethereum.state.account.Account object at 0x7f3c06361e20>]
=============Call Instruction!! print stack states=============
[LShR(Concat(If(3_calldatasize <= 0, 0, 3_calldata[0]),
            If(3_calldatasize <= 1, 0, 3_calldata[1]),
            If(3_calldatasize <= 2, 0, 3_calldata[2]),
            If(3_calldatasize <= 3, 0, 3_calldata[3]),
            If(3_calldatasize <= 4, 0, 3_calldata[4]),
            If(3_calldatasize <= 5, 0, 3_calldata[5]),
            If(3_calldatasize <= 6, 0, 3_calldata[6]),
            If(3_calldatasize <= 7, 0, 3_calldata[7]),
            If(3_calldatasize <= 8, 0, 3_calldata[8]),
            If(3_calldatasize <= 9, 0, 3_calldata[9]),
            If(3_calldatasize <= 10, 0, 3_calldata[10]),
            If(3_calldatasize <= 11, 0, 3_calldata[11]),
            If(3_calldatasize <= 12, 0, 3_calldata[12]),
            If(3_calldatasize <= 13, 0, 3_calldata[13]),
            If(3_calldatasize <= 14, 0, 3_calldata[14]),
            If(3_calldatasize <= 15, 0, 3_calldata[15]),
            If(3_calldatasize <= 16, 0, 3_calldata[16]),
            If(3_calldatasize <= 17, 0, 3_calldata[17]),
            If(3_calldatasize <= 18, 0, 3_calldata[18]),
            If(3_calldatasize <= 19, 0, 3_calldata[19]),
            If(3_calldatasize <= 20, 0, 3_calldata[20]),
            If(3_calldatasize <= 21, 0, 3_calldata[21]),
            If(3_calldatasize <= 22, 0, 3_calldata[22]),
            If(3_calldatasize <= 23, 0, 3_calldata[23]),
            If(3_calldatasize <= 24, 0, 3_calldata[24]),
            If(3_calldatasize <= 25, 0, 3_calldata[25]),
            If(3_calldatasize <= 26, 0, 3_calldata[26]),
            If(3_calldatasize <= 27, 0, 3_calldata[27]),
            If(3_calldatasize <= 28, 0, 3_calldata[28]),
            If(3_calldatasize <= 29, 0, 3_calldata[29]),
            If(3_calldatasize <= 30, 0, 3_calldata[30]),
            If(3_calldatasize <= 31, 0, 3_calldata[31])),
     224), Concat(0, Concat(0, 96)), Concat(If(3_calldatasize <= 4, 0, 3_calldata[4]),
       If(3_calldatasize <= 5, 0, 3_calldata[5]),
       If(3_calldatasize <= 6, 0, 3_calldata[6]),
       If(3_calldatasize <= 7, 0, 3_calldata[7]),
       If(3_calldatasize <= 8, 0, 3_calldata[8]),
       If(3_calldatasize <= 9, 0, 3_calldata[9]),
       If(3_calldatasize <= 10, 0, 3_calldata[10]),
       If(3_calldatasize <= 11, 0, 3_calldata[11]),
       If(3_calldatasize <= 12, 0, 3_calldata[12]),
       If(3_calldatasize <= 13, 0, 3_calldata[13]),
       If(3_calldatasize <= 14, 0, 3_calldata[14]),
       If(3_calldatasize <= 15, 0, 3_calldata[15]),
       If(3_calldatasize <= 16, 0, 3_calldata[16]),
       If(3_calldatasize <= 17, 0, 3_calldata[17]),
       If(3_calldatasize <= 18, 0, 3_calldata[18]),
       If(3_calldatasize <= 19, 0, 3_calldata[19]),
       If(3_calldatasize <= 20, 0, 3_calldata[20]),
       If(3_calldatasize <= 21, 0, 3_calldata[21]),
       If(3_calldatasize <= 22, 0, 3_calldata[22]),
       If(3_calldatasize <= 23, 0, 3_calldata[23]),
       If(3_calldatasize <= 24, 0, 3_calldata[24]),
       If(3_calldatasize <= 25, 0, 3_calldata[25]),
       If(3_calldatasize <= 26, 0, 3_calldata[26]),
       If(3_calldatasize <= 27, 0, 3_calldata[27]),
       If(3_calldatasize <= 28, 0, 3_calldata[28]),
       If(3_calldatasize <= 29, 0, 3_calldata[29]),
       If(3_calldatasize <= 30, 0, 3_calldata[30]),
       If(3_calldatasize <= 31, 0, 3_calldata[31]),
       If(3_calldatasize <= 32, 0, 3_calldata[32]),
       If(3_calldatasize <= 33, 0, 3_calldata[33]),
       If(3_calldatasize <= 34, 0, 3_calldata[34]),
       If(3_calldatasize <= 35, 0, 3_calldata[35])), Concat(If(3_calldatasize <= 36, 0, 3_calldata[36]),
       If(3_calldatasize <= 37, 0, 3_calldata[37]),
       If(3_calldatasize <= 38, 0, 3_calldata[38]),
       If(3_calldatasize <= 39, 0, 3_calldata[39]),
       If(3_calldatasize <= 40, 0, 3_calldata[40]),
       If(3_calldatasize <= 41, 0, 3_calldata[41]),
       If(3_calldatasize <= 42, 0, 3_calldata[42]),
       If(3_calldatasize <= 43, 0, 3_calldata[43]),
       If(3_calldatasize <= 44, 0, 3_calldata[44]),
       If(3_calldatasize <= 45, 0, 3_calldata[45]),
       If(3_calldatasize <= 46, 0, 3_calldata[46]),
       If(3_calldatasize <= 47, 0, 3_calldata[47]),
       If(3_calldatasize <= 48, 0, 3_calldata[48]),
       If(3_calldatasize <= 49, 0, 3_calldata[49]),
       If(3_calldatasize <= 50, 0, 3_calldata[50]),
       If(3_calldatasize <= 51, 0, 3_calldata[51]),
       If(3_calldatasize <= 52, 0, 3_calldata[52]),
       If(3_calldatasize <= 53, 0, 3_calldata[53]),
       If(3_calldatasize <= 54, 0, 3_calldata[54]),
       If(3_calldatasize <= 55, 0, 3_calldata[55]),
       If(3_calldatasize <= 56, 0, 3_calldata[56]),
       If(3_calldatasize <= 57, 0, 3_calldata[57]),
       If(3_calldatasize <= 58, 0, 3_calldata[58]),
       If(3_calldatasize <= 59, 0, 3_calldata[59]),
       If(3_calldatasize <= 60, 0, 3_calldata[60]),
       If(3_calldatasize <= 61, 0, 3_calldata[61]),
       If(3_calldatasize <= 62, 0, 3_calldata[62]),
       If(3_calldatasize <= 63, 0, 3_calldata[63]),
       If(3_calldatasize <= 64, 0, 3_calldata[64]),
       If(3_calldatasize <= 65, 0, 3_calldata[65]),
       If(3_calldatasize <= 66, 0, 3_calldata[66]),
       If(3_calldatasize <= 67, 0, 3_calldata[67])), Concat(0,
       If(2_calldatasize <= 12, 0, 2_calldata[12]),
       If(2_calldatasize <= 13, 0, 2_calldata[13]),
       If(2_calldatasize <= 14, 0, 2_calldata[14]),
       If(2_calldatasize <= 15, 0, 2_calldata[15]),
       If(2_calldatasize <= 16, 0, 2_calldata[16]),
       If(2_calldatasize <= 17, 0, 2_calldata[17]),
       If(2_calldatasize <= 18, 0, 2_calldata[18]),
       If(2_calldatasize <= 19, 0, 2_calldata[19]),
       If(2_calldatasize <= 20, 0, 2_calldata[20]),
       If(2_calldatasize <= 21, 0, 2_calldata[21]),
       If(2_calldatasize <= 22, 0, 2_calldata[22]),
       If(2_calldatasize <= 23, 0, 2_calldata[23]),
       If(2_calldatasize <= 24, 0, 2_calldata[24]),
       If(2_calldatasize <= 25, 0, 2_calldata[25]),
       If(2_calldatasize <= 26, 0, 2_calldata[26]),
       If(2_calldatasize <= 27, 0, 2_calldata[27]),
       If(2_calldatasize <= 28, 0, 2_calldata[28]),
       If(2_calldatasize <= 29, 0, 2_calldata[29]),
       If(2_calldatasize <= 30, 0, 2_calldata[30]),
       If(2_calldatasize <= 31, 0, 2_calldata[31])), Concat(0, Concat(Concat(Concat(72, 70), 27), 86)), 196, Concat(0, 0), 128, 196 - 128, 128, 0, Concat(0,
       If(2_calldatasize <= 12, 0, 2_calldata[12]),
       If(2_calldatasize <= 13, 0, 2_calldata[13]),
       If(2_calldatasize <= 14, 0, 2_calldata[14]),
       If(2_calldatasize <= 15, 0, 2_calldata[15]),
       If(2_calldatasize <= 16, 0, 2_calldata[16]),
       If(2_calldatasize <= 17, 0, 2_calldata[17]),
       If(2_calldatasize <= 18, 0, 2_calldata[18]),
       If(2_calldatasize <= 19, 0, 2_calldata[19]),
       If(2_calldatasize <= 20, 0, 2_calldata[20]),
       If(2_calldatasize <= 21, 0, 2_calldata[21]),
       If(2_calldatasize <= 22, 0, 2_calldata[22]),
       If(2_calldatasize <= 23, 0, 2_calldata[23]),
       If(2_calldatasize <= 24, 0, 2_calldata[24]),
       If(2_calldatasize <= 25, 0, 2_calldata[25]),
       If(2_calldatasize <= 26, 0, 2_calldata[26]),
       If(2_calldatasize <= 27, 0, 2_calldata[27]),
       If(2_calldatasize <= 28, 0, 2_calldata[28]),
       If(2_calldatasize <= 29, 0, 2_calldata[29]),
       If(2_calldatasize <= 30, 0, 2_calldata[30]),
       If(2_calldatasize <= 31, 0, 2_calldata[31])), 3_gas]
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
add callable sc
321474317806661133005631537738372018995223047802
MAIN
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
51421440056055728346017419001665401074216449311
sender_3
not a empty account [<mythril.laser.ethereum.state.account.Account object at 0x7f3c06361e20>]
Symbolic call encountered
------------------ get callable target call -------------------------------
[callable tx created] =============
SUB

======= Print forked caller stack ========== [LShR(Concat(If(3_calldatasize <= 0, 0, 3_calldata[0]),
            If(3_calldatasize <= 1, 0, 3_calldata[1]),
            If(3_calldatasize <= 2, 0, 3_calldata[2]),
            If(3_calldatasize <= 3, 0, 3_calldata[3]),
            If(3_calldatasize <= 4, 0, 3_calldata[4]),
            If(3_calldatasize <= 5, 0, 3_calldata[5]),
            If(3_calldatasize <= 6, 0, 3_calldata[6]),
            If(3_calldatasize <= 7, 0, 3_calldata[7]),
            If(3_calldatasize <= 8, 0, 3_calldata[8]),
            If(3_calldatasize <= 9, 0, 3_calldata[9]),
            If(3_calldatasize <= 10, 0, 3_calldata[10]),
            If(3_calldatasize <= 11, 0, 3_calldata[11]),
            If(3_calldatasize <= 12, 0, 3_calldata[12]),
            If(3_calldatasize <= 13, 0, 3_calldata[13]),
            If(3_calldatasize <= 14, 0, 3_calldata[14]),
            If(3_calldatasize <= 15, 0, 3_calldata[15]),
            If(3_calldatasize <= 16, 0, 3_calldata[16]),
            If(3_calldatasize <= 17, 0, 3_calldata[17]),
            If(3_calldatasize <= 18, 0, 3_calldata[18]),
            If(3_calldatasize <= 19, 0, 3_calldata[19]),
            If(3_calldatasize <= 20, 0, 3_calldata[20]),
            If(3_calldatasize <= 21, 0, 3_calldata[21]),
            If(3_calldatasize <= 22, 0, 3_calldata[22]),
            If(3_calldatasize <= 23, 0, 3_calldata[23]),
            If(3_calldatasize <= 24, 0, 3_calldata[24]),
            If(3_calldatasize <= 25, 0, 3_calldata[25]),
            If(3_calldatasize <= 26, 0, 3_calldata[26]),
            If(3_calldatasize <= 27, 0, 3_calldata[27]),
            If(3_calldatasize <= 28, 0, 3_calldata[28]),
            If(3_calldatasize <= 29, 0, 3_calldata[29]),
            If(3_calldatasize <= 30, 0, 3_calldata[30]),
            If(3_calldatasize <= 31, 0, 3_calldata[31])),
     224), Concat(0, Concat(0, 96)), Concat(If(3_calldatasize <= 4, 0, 3_calldata[4]),
       If(3_calldatasize <= 5, 0, 3_calldata[5]),
       If(3_calldatasize <= 6, 0, 3_calldata[6]),
       If(3_calldatasize <= 7, 0, 3_calldata[7]),
       If(3_calldatasize <= 8, 0, 3_calldata[8]),
       If(3_calldatasize <= 9, 0, 3_calldata[9]),
       If(3_calldatasize <= 10, 0, 3_calldata[10]),
       If(3_calldatasize <= 11, 0, 3_calldata[11]),
       If(3_calldatasize <= 12, 0, 3_calldata[12]),
       If(3_calldatasize <= 13, 0, 3_calldata[13]),
       If(3_calldatasize <= 14, 0, 3_calldata[14]),
       If(3_calldatasize <= 15, 0, 3_calldata[15]),
       If(3_calldatasize <= 16, 0, 3_calldata[16]),
       If(3_calldatasize <= 17, 0, 3_calldata[17]),
       If(3_calldatasize <= 18, 0, 3_calldata[18]),
       If(3_calldatasize <= 19, 0, 3_calldata[19]),
       If(3_calldatasize <= 20, 0, 3_calldata[20]),
       If(3_calldatasize <= 21, 0, 3_calldata[21]),
       If(3_calldatasize <= 22, 0, 3_calldata[22]),
       If(3_calldatasize <= 23, 0, 3_calldata[23]),
       If(3_calldatasize <= 24, 0, 3_calldata[24]),
       If(3_calldatasize <= 25, 0, 3_calldata[25]),
       If(3_calldatasize <= 26, 0, 3_calldata[26]),
       If(3_calldatasize <= 27, 0, 3_calldata[27]),
       If(3_calldatasize <= 28, 0, 3_calldata[28]),
       If(3_calldatasize <= 29, 0, 3_calldata[29]),
       If(3_calldatasize <= 30, 0, 3_calldata[30]),
       If(3_calldatasize <= 31, 0, 3_calldata[31]),
       If(3_calldatasize <= 32, 0, 3_calldata[32]),
       If(3_calldatasize <= 33, 0, 3_calldata[33]),
       If(3_calldatasize <= 34, 0, 3_calldata[34]),
       If(3_calldatasize <= 35, 0, 3_calldata[35])), Concat(If(3_calldatasize <= 36, 0, 3_calldata[36]),
       If(3_calldatasize <= 37, 0, 3_calldata[37]),
       If(3_calldatasize <= 38, 0, 3_calldata[38]),
       If(3_calldatasize <= 39, 0, 3_calldata[39]),
       If(3_calldatasize <= 40, 0, 3_calldata[40]),
       If(3_calldatasize <= 41, 0, 3_calldata[41]),
       If(3_calldatasize <= 42, 0, 3_calldata[42]),
       If(3_calldatasize <= 43, 0, 3_calldata[43]),
       If(3_calldatasize <= 44, 0, 3_calldata[44]),
       If(3_calldatasize <= 45, 0, 3_calldata[45]),
       If(3_calldatasize <= 46, 0, 3_calldata[46]),
       If(3_calldatasize <= 47, 0, 3_calldata[47]),
       If(3_calldatasize <= 48, 0, 3_calldata[48]),
       If(3_calldatasize <= 49, 0, 3_calldata[49]),
       If(3_calldatasize <= 50, 0, 3_calldata[50]),
       If(3_calldatasize <= 51, 0, 3_calldata[51]),
       If(3_calldatasize <= 52, 0, 3_calldata[52]),
       If(3_calldatasize <= 53, 0, 3_calldata[53]),
       If(3_calldatasize <= 54, 0, 3_calldata[54]),
       If(3_calldatasize <= 55, 0, 3_calldata[55]),
       If(3_calldatasize <= 56, 0, 3_calldata[56]),
       If(3_calldatasize <= 57, 0, 3_calldata[57]),
       If(3_calldatasize <= 58, 0, 3_calldata[58]),
       If(3_calldatasize <= 59, 0, 3_calldata[59]),
       If(3_calldatasize <= 60, 0, 3_calldata[60]),
       If(3_calldatasize <= 61, 0, 3_calldata[61]),
       If(3_calldatasize <= 62, 0, 3_calldata[62]),
       If(3_calldatasize <= 63, 0, 3_calldata[63]),
       If(3_calldatasize <= 64, 0, 3_calldata[64]),
       If(3_calldatasize <= 65, 0, 3_calldata[65]),
       If(3_calldatasize <= 66, 0, 3_calldata[66]),
       If(3_calldatasize <= 67, 0, 3_calldata[67])), Concat(0,
       If(2_calldatasize <= 12, 0, 2_calldata[12]),
       If(2_calldatasize <= 13, 0, 2_calldata[13]),
       If(2_calldatasize <= 14, 0, 2_calldata[14]),
       If(2_calldatasize <= 15, 0, 2_calldata[15]),
       If(2_calldatasize <= 16, 0, 2_calldata[16]),
       If(2_calldatasize <= 17, 0, 2_calldata[17]),
       If(2_calldatasize <= 18, 0, 2_calldata[18]),
       If(2_calldatasize <= 19, 0, 2_calldata[19]),
       If(2_calldatasize <= 20, 0, 2_calldata[20]),
       If(2_calldatasize <= 21, 0, 2_calldata[21]),
       If(2_calldatasize <= 22, 0, 2_calldata[22]),
       If(2_calldatasize <= 23, 0, 2_calldata[23]),
       If(2_calldatasize <= 24, 0, 2_calldata[24]),
       If(2_calldatasize <= 25, 0, 2_calldata[25]),
       If(2_calldatasize <= 26, 0, 2_calldata[26]),
       If(2_calldatasize <= 27, 0, 2_calldata[27]),
       If(2_calldatasize <= 28, 0, 2_calldata[28]),
       If(2_calldatasize <= 29, 0, 2_calldata[29]),
       If(2_calldatasize <= 30, 0, 2_calldata[30]),
       If(2_calldatasize <= 31, 0, 2_calldata[31])), Concat(0, Concat(Concat(Concat(72, 70), 27), 86)), 196]

Setup new transaction %s MessageCallTransaction 4 from 321474317806661133005631537738372018995223047802 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
op code is CALL
=========================
current opcode is {'address': 0, 'opcode': 'PUSH1', 'argument': (128,)}
op code is PUSH1
=========================
current opcode is {'address': 2, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 4, 'opcode': 'MSTORE'}
op code is MSTORE
=========================
current opcode is {'address': 5, 'opcode': 'CALLVALUE'}
op code is CALLVALUE
=========================
current opcode is {'address': 6, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 7, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 8, 'opcode': 'PUSH2', 'argument': (0, 16)}
op code is PUSH2
=========================
current opcode is {'address': 11, 'opcode': 'JUMPI'}
unreached path
Now in function: fallback in contract: SUB
op code is JUMPI
=========================
current opcode is {'address': 16, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 17, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 18, 'opcode': 'PUSH1', 'argument': (4,)}
op code is PUSH1
=========================
current opcode is {'address': 20, 'opcode': 'CALLDATASIZE'}
op code is CALLDATASIZE
=========================
current opcode is {'address': 21, 'opcode': 'LT'}
op code is LT
=========================
current opcode is {'address': 22, 'opcode': 'PUSH2', 'argument': (0, 65)}
op code is PUSH2
=========================
current opcode is {'address': 25, 'opcode': 'JUMPI'}
op code is JUMPI
=========================
current opcode is {'address': 26, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 28, 'opcode': 'CALLDATALOAD'}
op code is CALLDATALOAD
=========================
current opcode is {'address': 29, 'opcode': 'PUSH1', 'argument': (224,)}
op code is PUSH1
=========================
current opcode is {'address': 31, 'opcode': 'SHR'}
op code is SHR
=========================
current opcode is {'address': 32, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 33, 'opcode': 'PUSH4', 'argument': (55, 155, 246, 60)}
op code is PUSH4
=========================
current opcode is {'address': 38, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 39, 'opcode': 'PUSH2', 'argument': (0, 70)}
op code is PUSH2
=========================
current opcode is {'address': 42, 'opcode': 'JUMPI'}
op code is JUMPI
=========================
current opcode is {'address': 43, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 44, 'opcode': 'PUSH4', 'argument': (63, 164, 242, 69)}
op code is PUSH4
=========================
current opcode is {'address': 49, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 50, 'opcode': 'PUSH2', 'argument': (0, 100)}
op code is PUSH2
=========================
current opcode is {'address': 53, 'opcode': 'JUMPI'}
op code is JUMPI
=========================
current opcode is {'address': 54, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 55, 'opcode': 'PUSH4', 'argument': (72, 70, 27, 86)}
op code is PUSH4
=========================
current opcode is {'address': 60, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 61, 'opcode': 'PUSH2', 'argument': (0, 130)}
op code is PUSH2
=========================
current opcode is {'address': 64, 'opcode': 'JUMPI'}
unreached path
Now in function: fallback in contract: SUB
op code is JUMPI
=========================
current opcode is {'address': 130, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 131, 'opcode': 'PUSH2', 'argument': (0, 156)}
op code is PUSH2
=========================
current opcode is {'address': 134, 'opcode': 'PUSH1', 'argument': (4,)}
op code is PUSH1
=========================
current opcode is {'address': 136, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 137, 'opcode': 'CALLDATASIZE'}
op code is CALLDATASIZE
=========================
current opcode is {'address': 138, 'opcode': 'SUB'}
op code is SUB
=========================
current opcode is {'address': 139, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 140, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 141, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 142, 'opcode': 'PUSH2', 'argument': (0, 151)}
op code is PUSH2
=========================
current opcode is {'address': 145, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 146, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 147, 'opcode': 'PUSH2', 'argument': (1, 211)}
op code is PUSH2
=========================
current opcode is {'address': 150, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 467, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 468, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 470, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 471, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 473, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 474, 'opcode': 'DUP6'}
op code is DUP6
=========================
current opcode is {'address': 475, 'opcode': 'SUB'}
op code is SUB
=========================
current opcode is {'address': 476, 'opcode': 'SLT'}
op code is SLT
=========================
current opcode is {'address': 477, 'opcode': 'ISZERO'}
op code is ISZERO
=========================
current opcode is {'address': 478, 'opcode': 'PUSH2', 'argument': (1, 234)}
op code is PUSH2
=========================
current opcode is {'address': 481, 'opcode': 'JUMPI'}
unreached path
Now in function: setValue(address,uint256) in contract: SUB
op code is JUMPI
=========================
current opcode is {'address': 490, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 491, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 493, 'opcode': 'PUSH2', 'argument': (1, 248)}
op code is PUSH2
=========================
current opcode is {'address': 496, 'opcode': 'DUP6'}
op code is DUP6
=========================
current opcode is {'address': 497, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 498, 'opcode': 'DUP7'}
op code is DUP7
=========================
current opcode is {'address': 499, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 500, 'opcode': 'PUSH2', 'argument': (1, 169)}
op code is PUSH2
=========================
current opcode is {'address': 503, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 425, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 426, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 428, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 429, 'opcode': 'CALLDATALOAD'}
op code is CALLDATALOAD
=========================
current opcode is {'address': 430, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 431, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 432, 'opcode': 'PUSH2', 'argument': (1, 184)}
op code is PUSH2
=========================
current opcode is {'address': 435, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 436, 'opcode': 'PUSH2', 'argument': (2, 238)}
op code is PUSH2
=========================
current opcode is {'address': 439, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 750, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 751, 'opcode': 'PUSH2', 'argument': (2, 247)}
op code is PUSH2
=========================
current opcode is {'address': 754, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 755, 'opcode': 'PUSH2', 'argument': (2, 170)}
op code is PUSH2
=========================
current opcode is {'address': 758, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 682, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 683, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 685, 'opcode': 'PUSH2', 'argument': (2, 181)}
op code is PUSH2
=========================
current opcode is {'address': 688, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 689, 'opcode': 'PUSH2', 'argument': (2, 188)}
op code is PUSH2
=========================
current opcode is {'address': 692, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 700, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 701, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 703, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 724, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 725, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 726, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 727, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 728, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 729, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 730, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 731, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 693, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 694, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 695, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 696, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 697, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 698, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 699, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 759, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 760, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 761, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 762, 'opcode': 'PUSH2', 'argument': (3, 2)}
op code is PUSH2
=========================
current opcode is {'address': 765, 'opcode': 'JUMPI'}
unreached path
Now in function: setValue(address,uint256) in contract: SUB
op code is JUMPI
=========================
current opcode is {'address': 770, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 771, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 772, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 440, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 441, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 442, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 443, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 444, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 445, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 504, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 505, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 506, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 507, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 508, 'opcode': 'PUSH1', 'argument': (32,)}
op code is PUSH1
=========================
current opcode is {'address': 510, 'opcode': 'PUSH2', 'argument': (2, 9)}
op code is PUSH2
=========================
current opcode is {'address': 513, 'opcode': 'DUP6'}
op code is DUP6
=========================
current opcode is {'address': 514, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 515, 'opcode': 'DUP7'}
op code is DUP7
=========================
current opcode is {'address': 516, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 517, 'opcode': 'PUSH2', 'argument': (1, 190)}
op code is PUSH2
=========================
current opcode is {'address': 520, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 446, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 447, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 449, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 450, 'opcode': 'CALLDATALOAD'}
op code is CALLDATALOAD
=========================
current opcode is {'address': 451, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 452, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 453, 'opcode': 'PUSH2', 'argument': (1, 205)}
op code is PUSH2
=========================
current opcode is {'address': 456, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 457, 'opcode': 'PUSH2', 'argument': (3, 5)}
op code is PUSH2
=========================
current opcode is {'address': 460, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 773, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 774, 'opcode': 'PUSH2', 'argument': (3, 14)}
op code is PUSH2
=========================
current opcode is {'address': 777, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 778, 'opcode': 'PUSH2', 'argument': (2, 220)}
op code is PUSH2
=========================
current opcode is {'address': 781, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 732, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 733, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 735, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 736, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 737, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 738, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 739, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 740, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 741, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 782, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 783, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 784, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 785, 'opcode': 'PUSH2', 'argument': (3, 25)}
op code is PUSH2
=========================
current opcode is {'address': 788, 'opcode': 'JUMPI'}
unreached path
Now in function: setValue(address,uint256) in contract: SUB
op code is JUMPI
=========================
current opcode is {'address': 793, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 794, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 795, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 461, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 462, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 463, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 464, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 465, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 466, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 521, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 522, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 523, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 524, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 525, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 526, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 527, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 528, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 529, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 530, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 151, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 152, 'opcode': 'PUSH2', 'argument': (0, 202)}
op code is PUSH2
=========================
current opcode is {'address': 155, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 202, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 203, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 204, 'opcode': 'PUSH1', 'argument': (1,)}
op code is PUSH1
=========================
current opcode is {'address': 206, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 208, 'opcode': 'PUSH2', 'argument': (1, 0)}
op code is PUSH2
=========================
current opcode is {'address': 211, 'opcode': 'EXP'}
op code is EXP
=========================
current opcode is {'address': 212, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 213, 'opcode': 'SLOAD'}
op code is SLOAD
=========================
current opcode is {'address': 214, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 215, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 236, 'opcode': 'MUL'}
op code is MUL
=========================
current opcode is {'address': 237, 'opcode': 'NOT'}
op code is NOT
=========================
current opcode is {'address': 238, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 239, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 240, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 241, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 262, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 263, 'opcode': 'MUL'}
op code is MUL
=========================
current opcode is {'address': 264, 'opcode': 'OR'}
op code is OR
=========================
current opcode is {'address': 265, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 266, 'opcode': 'SSTORE'}
op code is SSTORE
=========================
current opcode is {'address': 267, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 268, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 269, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 271, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 272, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 273, 'opcode': 'SSTORE'}
op code is SSTORE
=========================
current opcode is {'address': 274, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 275, 'opcode': 'PUSH1', 'argument': (1,)}
op code is PUSH1
=========================
current opcode is {'address': 277, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 279, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 280, 'opcode': 'SLOAD'}
op code is SLOAD
=========================
current opcode is {'address': 281, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 282, 'opcode': 'PUSH2', 'argument': (1, 0)}
op code is PUSH2
=========================
current opcode is {'address': 285, 'opcode': 'EXP'}
op code is EXP
=========================
current opcode is {'address': 286, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 287, 'opcode': 'DIV'}
op code is DIV
=========================
current opcode is {'address': 288, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 309, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 310, 'opcode': 'PUSH20', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH20
=========================
current opcode is {'address': 331, 'opcode': 'AND'}
op code is AND
=========================
current opcode is {'address': 332, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 333, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 335, 'opcode': 'MLOAD'}
op code is MLOAD
=========================
current opcode is {'address': 336, 'opcode': 'PUSH2', 'argument': (1, 88)}
op code is PUSH2
=========================
current opcode is {'address': 339, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 340, 'opcode': 'PUSH2', 'argument': (2, 84)}
op code is PUSH2
=========================
current opcode is {'address': 343, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 596, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 597, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 599, 'opcode': 'PUSH2', 'argument': (2, 95)}
op code is PUSH2
=========================
current opcode is {'address': 602, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 603, 'opcode': 'PUSH2', 'argument': (2, 34)}
op code is PUSH2
=========================
current opcode is {'address': 606, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 546, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 547, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 549, 'opcode': 'PUSH2', 'argument': (2, 47)}
op code is PUSH2
=========================
current opcode is {'address': 552, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 554, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 555, 'opcode': 'PUSH2', 'argument': (2, 159)}
op code is PUSH2
=========================
current opcode is {'address': 558, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 671, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 672, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 674, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 675, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 676, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 677, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 678, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 679, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 680, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 681, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 559, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 560, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 561, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 562, 'opcode': 'PUSH2', 'argument': (2, 58)}
op code is PUSH2
=========================
current opcode is {'address': 565, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 566, 'opcode': 'PUSH2', 'argument': (2, 235)}
op code is PUSH2
=========================
current opcode is {'address': 569, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 747, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 748, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 749, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 570, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 571, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 573, 'opcode': 'DUP3'}
op code is DUP3
=========================
current opcode is {'address': 574, 'opcode': 'ADD'}
op code is ADD
=========================
current opcode is {'address': 575, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 576, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 577, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 578, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 579, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 580, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 607, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 608, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 609, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 610, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 611, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 612, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 613, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 614, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 615, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 616, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 344, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 345, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 347, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
=========================
current opcode is {'address': 349, 'opcode': 'MLOAD'}
op code is MLOAD
=========================
current opcode is {'address': 350, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 351, 'opcode': 'DUP4'}
op code is DUP4
=========================
current opcode is {'address': 352, 'opcode': 'SUB'}
op code is SUB
=========================
current opcode is {'address': 353, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 354, 'opcode': 'DUP6'}
op code is DUP6
=========================
current opcode is {'address': 355, 'opcode': 'DUP8'}
op code is DUP8
=========================
current opcode is {'address': 356, 'opcode': 'GAS'}
op code is GAS
=========================
current opcode is {'address': 357, 'opcode': 'CALL'}
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
321474317806661133005631537738372018995223047802
MAIN
add callable sc
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
sender_3
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
321474317806661133005631537738372018995223047802
remove reentrancy target
=============Call Instruction!! print stack states=============
[LShR(Concat(96068430915292655604905722703794667520,
            If(3_calldatasize <= 16, 0, 3_calldata[16]),
            If(3_calldatasize <= 17, 0, 3_calldata[17]),
            If(3_calldatasize <= 18, 0, 3_calldata[18]),
            If(3_calldatasize <= 19, 0, 3_calldata[19]),
            If(3_calldatasize <= 20, 0, 3_calldata[20]),
            If(3_calldatasize <= 21, 0, 3_calldata[21]),
            If(3_calldatasize <= 22, 0, 3_calldata[22]),
            If(3_calldatasize <= 23, 0, 3_calldata[23]),
            If(3_calldatasize <= 24, 0, 3_calldata[24]),
            If(3_calldatasize <= 25, 0, 3_calldata[25]),
            If(3_calldatasize <= 26, 0, 3_calldata[26]),
            If(3_calldatasize <= 27, 0, 3_calldata[27]),
            If(3_calldatasize <= 28, 0, 3_calldata[28]),
            If(3_calldatasize <= 29, 0, 3_calldata[29]),
            If(3_calldatasize <= 30, 0, 3_calldata[30]),
            If(3_calldatasize <= 31, 0, 3_calldata[31])),
     224), Concat(0, Concat(0, 156)), Concat(0,
       If(3_calldatasize <= 16, 0, 3_calldata[16]),
       If(3_calldatasize <= 17, 0, 3_calldata[17]),
       If(3_calldatasize <= 18, 0, 3_calldata[18]),
       If(3_calldatasize <= 19, 0, 3_calldata[19]),
       If(3_calldatasize <= 20, 0, 3_calldata[20]),
       If(3_calldatasize <= 21, 0, 3_calldata[21]),
       If(3_calldatasize <= 22, 0, 3_calldata[22]),
       If(3_calldatasize <= 23, 0, 3_calldata[23]),
       If(3_calldatasize <= 24, 0, 3_calldata[24]),
       If(3_calldatasize <= 25, 0, 3_calldata[25]),
       If(3_calldatasize <= 26, 0, 3_calldata[26]),
       If(3_calldatasize <= 27, 0, 3_calldata[27]),
       If(3_calldatasize <= 28, 0, 3_calldata[28]),
       If(3_calldatasize <= 29, 0, 3_calldata[29]),
       If(3_calldatasize <= 30, 0, 3_calldata[30]),
       If(3_calldatasize <= 31, 0, 3_calldata[31]),
       If(3_calldatasize <= 32, 0, 3_calldata[32]),
       If(3_calldatasize <= 33, 0, 3_calldata[33]),
       If(3_calldatasize <= 34, 0, 3_calldata[34]),
       If(3_calldatasize <= 35, 0, 3_calldata[35])), Concat(If(3_calldatasize <= 36, 0, 3_calldata[36]),
       If(3_calldatasize <= 37, 0, 3_calldata[37]),
       If(3_calldatasize <= 38, 0, 3_calldata[38]),
       If(3_calldatasize <= 39, 0, 3_calldata[39]),
       If(3_calldatasize <= 40, 0, 3_calldata[40]),
       If(3_calldatasize <= 41, 0, 3_calldata[41]),
       If(3_calldatasize <= 42, 0, 3_calldata[42]),
       If(3_calldatasize <= 43, 0, 3_calldata[43]),
       If(3_calldatasize <= 44, 0, 3_calldata[44]),
       If(3_calldatasize <= 45, 0, 3_calldata[45]),
       If(3_calldatasize <= 46, 0, 3_calldata[46]),
       If(3_calldatasize <= 47, 0, 3_calldata[47]),
       If(3_calldatasize <= 48, 0, 3_calldata[48]),
       If(3_calldatasize <= 49, 0, 3_calldata[49]),
       If(3_calldatasize <= 50, 0, 3_calldata[50]),
       If(3_calldatasize <= 51, 0, 3_calldata[51]),
       If(3_calldatasize <= 52, 0, 3_calldata[52]),
       If(3_calldatasize <= 53, 0, 3_calldata[53]),
       If(3_calldatasize <= 54, 0, 3_calldata[54]),
       If(3_calldatasize <= 55, 0, 3_calldata[55]),
       If(3_calldatasize <= 56, 0, 3_calldata[56]),
       If(3_calldatasize <= 57, 0, 3_calldata[57]),
       If(3_calldatasize <= 58, 0, 3_calldata[58]),
       If(3_calldatasize <= 59, 0, 3_calldata[59]),
       If(3_calldatasize <= 60, 0, 3_calldata[60]),
       If(3_calldatasize <= 61, 0, 3_calldata[61]),
       If(3_calldatasize <= 62, 0, 3_calldata[62]),
       If(3_calldatasize <= 63, 0, 3_calldata[63]),
       If(3_calldatasize <= 64, 0, 3_calldata[64]),
       If(3_calldatasize <= 65, 0, 3_calldata[65]),
       If(3_calldatasize <= 66, 0, 3_calldata[66]),
       If(3_calldatasize <= 67, 0, 3_calldata[67])), Concat(0,
       Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(255,
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                   255),
                            255),
                     255),
              255)) &
Concat(0,
       Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(255,
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                   255),
                            255),
                     255),
              255)) &
UDiv(Concat(0,
            If(3_calldatasize <= 16, 0, 3_calldata[16]),
            If(3_calldatasize <= 17, 0, 3_calldata[17]),
            If(3_calldatasize <= 18, 0, 3_calldata[18]),
            If(3_calldatasize <= 19, 0, 3_calldata[19]),
            If(3_calldatasize <= 20, 0, 3_calldata[20]),
            If(3_calldatasize <= 21, 0, 3_calldata[21]),
            If(3_calldatasize <= 22, 0, 3_calldata[22]),
            If(3_calldatasize <= 23, 0, 3_calldata[23]),
            If(3_calldatasize <= 24, 0, 3_calldata[24]),
            If(3_calldatasize <= 25, 0, 3_calldata[25]),
            If(3_calldatasize <= 26, 0, 3_calldata[26]),
            If(3_calldatasize <= 27, 0, 3_calldata[27]),
            If(3_calldatasize <= 28, 0, 3_calldata[28]),
            If(3_calldatasize <= 29, 0, 3_calldata[29]),
            If(3_calldatasize <= 30, 0, 3_calldata[30]),
            If(3_calldatasize <= 31, 0, 3_calldata[31]),
            If(3_calldatasize <= 32, 0, 3_calldata[32]),
            If(3_calldatasize <= 33, 0, 3_calldata[33]),
            If(3_calldatasize <= 34, 0, 3_calldata[34]),
            If(3_calldatasize <= 35, 0, 3_calldata[35])),
     1), Concat(If(3_calldatasize <= 36, 0, 3_calldata[36]),
       If(3_calldatasize <= 37, 0, 3_calldata[37]),
       If(3_calldatasize <= 38, 0, 3_calldata[38]),
       If(3_calldatasize <= 39, 0, 3_calldata[39]),
       If(3_calldatasize <= 40, 0, 3_calldata[40]),
       If(3_calldatasize <= 41, 0, 3_calldata[41]),
       If(3_calldatasize <= 42, 0, 3_calldata[42]),
       If(3_calldatasize <= 43, 0, 3_calldata[43]),
       If(3_calldatasize <= 44, 0, 3_calldata[44]),
       If(3_calldatasize <= 45, 0, 3_calldata[45]),
       If(3_calldatasize <= 46, 0, 3_calldata[46]),
       If(3_calldatasize <= 47, 0, 3_calldata[47]),
       If(3_calldatasize <= 48, 0, 3_calldata[48]),
       If(3_calldatasize <= 49, 0, 3_calldata[49]),
       If(3_calldatasize <= 50, 0, 3_calldata[50]),
       If(3_calldatasize <= 51, 0, 3_calldata[51]),
       If(3_calldatasize <= 52, 0, 3_calldata[52]),
       If(3_calldatasize <= 53, 0, 3_calldata[53]),
       If(3_calldatasize <= 54, 0, 3_calldata[54]),
       If(3_calldatasize <= 55, 0, 3_calldata[55]),
       If(3_calldatasize <= 56, 0, 3_calldata[56]),
       If(3_calldatasize <= 57, 0, 3_calldata[57]),
       If(3_calldatasize <= 58, 0, 3_calldata[58]),
       If(3_calldatasize <= 59, 0, 3_calldata[59]),
       If(3_calldatasize <= 60, 0, 3_calldata[60]),
       If(3_calldatasize <= 61, 0, 3_calldata[61]),
       If(3_calldatasize <= 62, 0, 3_calldata[62]),
       If(3_calldatasize <= 63, 0, 3_calldata[63]),
       If(3_calldatasize <= 64, 0, 3_calldata[64]),
       If(3_calldatasize <= 65, 0, 3_calldata[65]),
       If(3_calldatasize <= 66, 0, 3_calldata[66]),
       If(3_calldatasize <= 67, 0, 3_calldata[67])), 128, Concat(0, 0), 128, 128 - 128, 128, Concat(If(3_calldatasize <= 36, 0, 3_calldata[36]),
       If(3_calldatasize <= 37, 0, 3_calldata[37]),
       If(3_calldatasize <= 38, 0, 3_calldata[38]),
       If(3_calldatasize <= 39, 0, 3_calldata[39]),
       If(3_calldatasize <= 40, 0, 3_calldata[40]),
       If(3_calldatasize <= 41, 0, 3_calldata[41]),
       If(3_calldatasize <= 42, 0, 3_calldata[42]),
       If(3_calldatasize <= 43, 0, 3_calldata[43]),
       If(3_calldatasize <= 44, 0, 3_calldata[44]),
       If(3_calldatasize <= 45, 0, 3_calldata[45]),
       If(3_calldatasize <= 46, 0, 3_calldata[46]),
       If(3_calldatasize <= 47, 0, 3_calldata[47]),
       If(3_calldatasize <= 48, 0, 3_calldata[48]),
       If(3_calldatasize <= 49, 0, 3_calldata[49]),
       If(3_calldatasize <= 50, 0, 3_calldata[50]),
       If(3_calldatasize <= 51, 0, 3_calldata[51]),
       If(3_calldatasize <= 52, 0, 3_calldata[52]),
       If(3_calldatasize <= 53, 0, 3_calldata[53]),
       If(3_calldatasize <= 54, 0, 3_calldata[54]),
       If(3_calldatasize <= 55, 0, 3_calldata[55]),
       If(3_calldatasize <= 56, 0, 3_calldata[56]),
       If(3_calldatasize <= 57, 0, 3_calldata[57]),
       If(3_calldatasize <= 58, 0, 3_calldata[58]),
       If(3_calldatasize <= 59, 0, 3_calldata[59]),
       If(3_calldatasize <= 60, 0, 3_calldata[60]),
       If(3_calldatasize <= 61, 0, 3_calldata[61]),
       If(3_calldatasize <= 62, 0, 3_calldata[62]),
       If(3_calldatasize <= 63, 0, 3_calldata[63]),
       If(3_calldatasize <= 64, 0, 3_calldata[64]),
       If(3_calldatasize <= 65, 0, 3_calldata[65]),
       If(3_calldatasize <= 66, 0, 3_calldata[66]),
       If(3_calldatasize <= 67, 0, 3_calldata[67])), Concat(0,
       Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(255,
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                   255),
                            255),
                     255),
              255)) &
Concat(0,
       Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(Concat(255,
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                        255),
                                   255),
                            255),
                     255),
              255)) &
UDiv(Concat(0,
            If(3_calldatasize <= 16, 0, 3_calldata[16]),
            If(3_calldatasize <= 17, 0, 3_calldata[17]),
            If(3_calldatasize <= 18, 0, 3_calldata[18]),
            If(3_calldatasize <= 19, 0, 3_calldata[19]),
            If(3_calldatasize <= 20, 0, 3_calldata[20]),
            If(3_calldatasize <= 21, 0, 3_calldata[21]),
            If(3_calldatasize <= 22, 0, 3_calldata[22]),
            If(3_calldatasize <= 23, 0, 3_calldata[23]),
            If(3_calldatasize <= 24, 0, 3_calldata[24]),
            If(3_calldatasize <= 25, 0, 3_calldata[25]),
            If(3_calldatasize <= 26, 0, 3_calldata[26]),
            If(3_calldatasize <= 27, 0, 3_calldata[27]),
            If(3_calldatasize <= 28, 0, 3_calldata[28]),
            If(3_calldatasize <= 29, 0, 3_calldata[29]),
            If(3_calldatasize <= 30, 0, 3_calldata[30]),
            If(3_calldatasize <= 31, 0, 3_calldata[31]),
            If(3_calldatasize <= 32, 0, 3_calldata[32]),
            If(3_calldatasize <= 33, 0, 3_calldata[33]),
            If(3_calldatasize <= 34, 0, 3_calldata[34]),
            If(3_calldatasize <= 35, 0, 3_calldata[35])),
     1), 4_gas]
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
321474317806661133005631537738372018995223047802
MAIN
add callable sc
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
sender_3
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
321474317806661133005631537738372018995223047802
remove reentrancy target
Empty callable list, so this is a external call, we will just return.
Symbolic call encountered
------------------call to EOA-------------------------------
op code is CALL
=========================
current opcode is {'address': 358, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 359, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 360, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 361, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 362, 'opcode': 'RETURNDATASIZE'}
op code is RETURNDATASIZE
=========================
current opcode is {'address': 363, 'opcode': 'DUP1'}
op code is DUP1
=========================
current opcode is {'address': 364, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
=========================
current opcode is {'address': 366, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 367, 'opcode': 'EQ'}
op code is EQ
=========================
current opcode is {'address': 368, 'opcode': 'PUSH2', 'argument': (1, 149)}
op code is PUSH2
=========================
current opcode is {'address': 371, 'opcode': 'JUMPI'}
Now in function: setValue(address,uint256) in contract: SUB
op code is JUMPI
2 worklist added! now the worklist num is 2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 372, 'opcode': 'PUSH1', 'argument': (64,)}
now we have 2 global state (path)!
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 405, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 374, 'opcode': 'MLOAD'}
op code is MLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 406, 'opcode': 'PUSH1', 'argument': (96,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 375, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 408, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 376, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 409, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 377, 'opcode': 'PUSH1', 'argument': (31,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 410, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 379, 'opcode': 'NOT'}
op code is NOT
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 411, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 380, 'opcode': 'PUSH1', 'argument': (63,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 412, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 382, 'opcode': 'RETURNDATASIZE'}
op code is RETURNDATASIZE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 413, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 383, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 414, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 384, 'opcode': 'AND'}
op code is AND
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 416, 'opcode': 'PUSH1', 'argument': (2,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 385, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 418, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 386, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 419, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 387, 'opcode': 'PUSH1', 'argument': (64,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 420, 'opcode': 'SSTORE'}
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
321474317806661133005631537738372018995223047802
MAIN
add callable sc
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
sender_3
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
321474317806661133005631537738372018995223047802
remove reentrancy target
op code is SSTORE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 389, 'opcode': 'MSTORE'}
op code is MSTORE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 421, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 390, 'opcode': 'RETURNDATASIZE'}
op code is RETURNDATASIZE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 422, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 391, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 423, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 392, 'opcode': 'MSTORE'}
op code is MSTORE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 424, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 393, 'opcode': 'RETURNDATASIZE'}
op code is RETURNDATASIZE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 156, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 394, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 157, 'opcode': 'STOP'}
now in msTX end, the activate_function is: setValue(address,uint256)
try to print global_state_call_chain: ['TX_4_SUB.setValue(address,uint256)']
END WITH Internal MessageCALLTX: MessageCallTransaction 4 from 321474317806661133005631537738372018995223047802 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 1
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 4 from 321474317806661133005631537738372018995223047802 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is ['TX_4_SUB.setValue(address,uint256)']
op code is STOP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 396, 'opcode': 'PUSH1', 'argument': (32,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 279, 'opcode': 'ISZERO'}
op code is ISZERO
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 398, 'opcode': 'DUP5'}
op code is DUP5
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 280, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 399, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 281, 'opcode': 'ISZERO'}
op code is ISZERO
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 400, 'opcode': 'RETURNDATACOPY'}
Warning! Unsupported symbolic max_length offset in RETURNDATACOPY
op code is RETURNDATACOPY
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 282, 'opcode': 'PUSH2', 'argument': (1, 39)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 401, 'opcode': 'PUSH2', 'argument': (1, 154)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 285, 'opcode': 'JUMPI'}
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 404, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 295, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 410, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 296, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 411, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 297, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 412, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 298, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 413, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 299, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 414, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 300, 'opcode': 'PUSH1', 'argument': (1,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 416, 'opcode': 'PUSH1', 'argument': (2,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 302, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 418, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 303, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 419, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 305, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 420, 'opcode': 'SSTORE'}
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
321474317806661133005631537738372018995223047802
MAIN
add callable sc
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
sender_3
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
321474317806661133005631537738372018995223047802
321474317806661133005631537738372018995223047802
remove reentrancy target
op code is SSTORE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 306, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 421, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 307, 'opcode': 'SLOAD'}
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
add callable sc
321474317806661133005631537738372018995223047802
MAIN
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
51421440056055728346017419001665401074216449311
sender_3
not a empty account [<mythril.laser.ethereum.state.account.Account object at 0x7f3c06693430>]
op code is SLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 422, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 308, 'opcode': 'PUSH2', 'argument': (1, 61)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 423, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 311, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 424, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 312, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 156, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 313, 'opcode': 'PUSH2', 'argument': (2, 104)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 157, 'opcode': 'STOP'}
now in msTX end, the activate_function is: setValue(address,uint256)
try to print global_state_call_chain: ['TX_4_SUB.setValue(address,uint256)']
END WITH Internal MessageCALLTX: MessageCallTransaction 4 from 321474317806661133005631537738372018995223047802 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f **************************
print origin potentiaon issue 1
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
Add new potential issue
print after potentiaon issue 6
End Transaction with MessageTX Normally: MessageCallTransaction 4 from 321474317806661133005631537738372018995223047802 to  0x901d12ebe1b195e5aa8748e62bd7734ae19b51f
call_chain is ['TX_4_SUB.setValue(address,uint256)']
op code is STOP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 316, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 279, 'opcode': 'ISZERO'}
op code is ISZERO
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 616, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 280, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 617, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 281, 'opcode': 'ISZERO'}
op code is ISZERO
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 619, 'opcode': 'PUSH2', 'argument': (2, 115)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 282, 'opcode': 'PUSH2', 'argument': (1, 39)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 622, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 285, 'opcode': 'JUMPI'}
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 623, 'opcode': 'PUSH2', 'argument': (2, 240)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 295, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 626, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 296, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 752, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 297, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 753, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 298, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 755, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 299, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 756, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 300, 'opcode': 'PUSH1', 'argument': (1,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 757, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 302, 'opcode': 'DUP1'}
op code is DUP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 758, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 303, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 759, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 305, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 760, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 306, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 761, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 307, 'opcode': 'SLOAD'}
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
add callable sc
321474317806661133005631537738372018995223047802
MAIN
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
51421440056055728346017419001665401074216449311
sender_3
not a empty account [<mythril.laser.ethereum.state.account.Account object at 0x7f3c067bb4c0>]
op code is SLOAD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 627, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 308, 'opcode': 'PUSH2', 'argument': (1, 61)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 628, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 311, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 629, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 312, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 630, 'opcode': 'PUSH2', 'argument': (2, 126)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 313, 'opcode': 'PUSH2', 'argument': (2, 104)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 633, 'opcode': 'DUP4'}
op code is DUP4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 316, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 634, 'opcode': 'PUSH2', 'argument': (2, 240)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 616, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 637, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 617, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 752, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 619, 'opcode': 'PUSH2', 'argument': (2, 115)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 753, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 622, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 755, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 623, 'opcode': 'PUSH2', 'argument': (2, 240)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 756, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 626, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 757, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 752, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 758, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 753, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 759, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 755, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 760, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 756, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 761, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 757, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 638, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 758, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 639, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 759, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 640, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 760, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 641, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 761, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 642, 'opcode': 'PUSH32', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH32
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 627, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 675, 'opcode': 'SUB'}
op code is SUB
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 628, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 676, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 629, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 677, 'opcode': 'GT'}
op code is GT
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 630, 'opcode': 'PUSH2', 'argument': (2, 126)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 678, 'opcode': 'ISZERO'}
op code is ISZERO
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 633, 'opcode': 'DUP4'}
op code is DUP4
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 679, 'opcode': 'PUSH2', 'argument': (2, 179)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 634, 'opcode': 'PUSH2', 'argument': (2, 240)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 682, 'opcode': 'JUMPI'}
unreached path
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 637, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 691, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 752, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 692, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 753, 'opcode': 'PUSH1', 'argument': (0,)}
op code is PUSH1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 693, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 755, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 694, 'opcode': 'ADD'}
op code is ADD
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 756, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 695, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 757, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 696, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 758, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 697, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 759, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 698, 'opcode': 'SWAP2'}
op code is SWAP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 760, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 699, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 761, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 700, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 638, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 701, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 639, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 317, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 640, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 318, 'opcode': 'SWAP3'}
op code is SWAP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 641, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 319, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 642, 'opcode': 'PUSH32', 'argument': (255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255)}
op code is PUSH32
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 320, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 675, 'opcode': 'SUB'}
op code is SUB
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 321, 'opcode': 'DUP2'}
op code is DUP2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 676, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 322, 'opcode': 'SWAP1'}
op code is SWAP1
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 677, 'opcode': 'GT'}
op code is GT
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 323, 'opcode': 'SSTORE'}
start to print accounts
1004753105490295263244812946565948198177742958590
0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe
1271270613000041655817448348132275889066893754095
0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
51421440056055728346017419001665401074216449311
SUB
add callable sc
321474317806661133005631537738372018995223047802
MAIN
Compare !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
51421440056055728346017419001665401074216449311
sender_3
not a empty account [<mythril.laser.ethereum.state.account.Account object at 0x7f3c3d0c5ee0>]
op code is SSTORE
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 678, 'opcode': 'ISZERO'}
op code is ISZERO
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 324, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 679, 'opcode': 'PUSH2', 'argument': (2, 179)}
op code is PUSH2
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 325, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 682, 'opcode': 'JUMPI'}
unreached path
Now in function: setValueInContractB(address,uint256) in contract: MAIN
op code is JUMPI
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 326, 'opcode': 'POP'}
op code is POP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 691, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 327, 'opcode': 'JUMP'}
op code is JUMP
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 692, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 96, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 693, 'opcode': 'DUP3'}
op code is DUP3
+++++++++++++ change to execute next path +++++++++++++++++
=========================
current opcode is {'address': 97, 'opcode': 'STOP'}
now in msTX end, the activate_function is: setValueInContractB(address,uint256)
try to print global_state_call_chain: ['TX_3_MAIN.setValueInContractB(address,uint256)']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
output EOA case global_state: ['TX_3_MAIN.setValueInContractB(address,uint256)']
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
End Transaction with EOA TX:  [%s]
call_chain is ['TX_3_MAIN.setValueInContractB(address,uint256)']
op code is STOP
=========================
current opcode is {'address': 694, 'opcode': 'ADD'}
now we have 1 global state (path)!
op code is ADD
=========================
current opcode is {'address': 695, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 696, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 697, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 698, 'opcode': 'SWAP2'}
op code is SWAP2
=========================
current opcode is {'address': 699, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 700, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 701, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 317, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 318, 'opcode': 'SWAP3'}
op code is SWAP3
=========================
current opcode is {'address': 319, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 320, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 321, 'opcode': 'DUP2'}
op code is DUP2
=========================
current opcode is {'address': 322, 'opcode': 'SWAP1'}
op code is SWAP1
=========================
current opcode is {'address': 323, 'opcode': 'SSTORE'}
op code is SSTORE
=========================
current opcode is {'address': 324, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 325, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 326, 'opcode': 'POP'}
op code is POP
=========================
current opcode is {'address': 327, 'opcode': 'JUMP'}
op code is JUMP
=========================
current opcode is {'address': 96, 'opcode': 'JUMPDEST'}
op code is JUMPDEST
=========================
current opcode is {'address': 97, 'opcode': 'STOP'}
now in msTX end, the activate_function is: setValueInContractB(address,uint256)
try to print global_state_call_chain: ['TX_3_MAIN.setValueInContractB(address,uint256)']
END with EOA TX CASE: MessageCallTransaction 3 from sender_3 to 0x384f682f4a5abefc8795cc38a340de9446dfae7a ***********
output EOA case global_state: ['TX_3_MAIN.setValueInContractB(address,uint256)']
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
global_state + potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
global_state constraints get solved passed!
potential_issue constraints get solved passed!
[Good!!] global_state + potential_issue constraints get solved passed!
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
global_state constraints get solved passed!
potential_issue constraints solve failed!
End Transaction with EOA TX:  [%s]
call_chain is ['TX_3_MAIN.setValueInContractB(address,uint256)']
op code is STOP
print report in [0]th open_state
The analysis was completed successfully. No issues were detected.

print report in [1]th open_state
The analysis was completed successfully. No issues were detected.

print report in [2]th open_state
==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: setValueInContractB(address,uint256)
PC address: 307
Estimated Gas Usage: 27677 - 177514
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [ATTACKER], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: setValueInContractB(address,uint256)
PC address: 323
Estimated Gas Usage: 27677 - 177514
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [ATTACKER], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SUB
Function name: setValue(address,uint256)
PC address: 357
Estimated Gas Usage: 27677 - 177514
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [CREATOR], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: SUB
Function name: setValue(address,uint256)
PC address: 357
Estimated Gas Usage: 18371 - 113312
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [CREATOR], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: MAIN
Function name: setValueInContractB(address,uint256)
PC address: 357
Estimated Gas Usage: 27677 - 177514
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [CREATOR], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SUB
Function name: setValue(address,uint256)
PC address: 420
Estimated Gas Usage: 27677 - 177514
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [ATTACKER], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0


print report in [3]th open_state
==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MAIN
Function name: setValueInContractB(address,uint256)
PC address: 307
Estimated Gas Usage: 27747 - 177867
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [ATTACKER], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SUB
Function name: setValue(address,uint256)
PC address: 357
Estimated Gas Usage: 27747 - 177867
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [ATTACKER], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: SUB
Function name: setValue(address,uint256)
PC address: 357
Estimated Gas Usage: 18441 - 113665
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [ATTACKER], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: MAIN
Function name: setValueInContractB(address,uint256)
PC address: 357
Estimated Gas Usage: 27747 - 177867
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [SOMEGUY], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0x0000000000000000000000000000000000000000', 0), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SUB
Function name: setValue(address,uint256)
PC address: 420
Estimated Gas Usage: 27747 - 177867
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x6080604052600060015534801561001557600080fd5b506040516104e43803806104e483398181016040528101906100379190610092565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b60008151905061008c816100f6565b92915050565b6000602082840312156100a8576100a76100f1565b5b60006100b68482850161007d565b91505092915050565b60006100ca826100d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100ff816100bf565b811461010a57600080fd5b50565b6103c88061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f2ecdb714610046578063673402e5146100625780639ff8a36814610080575b600080fd5b610060600480360381019061005b919061019c565b61009e565b005b61006a610148565b604051610077919061024d565b60405180910390f35b61008861014e565b6040516100959190610232565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348461b5683836040518363ffffffff1660e01b81526004016100f9929190610209565b600060405180830381600087803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b50505050600180600082825461013d9190610268565b925050819055505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061018181610364565b92915050565b6000813590506101968161037b565b92915050565b600080604083850312156101b3576101b261035f565b5b60006101c185828601610172565b92505060206101d285828601610187565b9150509250929050565b6101e5816102be565b82525050565b6101f4816102fa565b82525050565b610203816102f0565b82525050565b600060408201905061021e60008301856101dc565b61022b60208301846101fa565b9392505050565b600060208201905061024760008301846101eb565b92915050565b600060208201905061026260008301846101fa565b92915050565b6000610273826102f0565b915061027e836102f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102b3576102b2610330565b5b828201905092915050565b60006102c9826102d0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103058261030c565b9050919050565b60006103178261031e565b9050919050565b6000610329826102d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61036d816102be565b811461037857600080fd5b50565b610384816102f0565b811461038f57600080fd5b5056fea2646970667358221220a0bfeb12c7cbf5a40aaa893a241a235e4ace344b3c301f9d424d389b07f2176564736f6c634300080700330000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51fdecoded_data: , value: 0x0
Caller: [ATTACKER], function: setValueInContractB(address,uint256), txdata: 0x4f2ecdb7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0), value: 0x0


time cost [27s]
